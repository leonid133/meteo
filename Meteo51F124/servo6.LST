C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SERVO6
OBJECT MODULE PLACED IN servo6.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe servo6.c DB OE BR

line level    source

   1          
   2          #include "c8051f120.h"
   3          #include "init.h"
   4          #include "comport.h"
   5          #include <intrins.h>
   6          #include <ctype.h>
   7          #include <stdio.h>
   8          #include <stdlib.h>
   9          #include <math.h> 
  10          //system
  11          #define SYSCLK      24883200  // (24856840L * 1 / 1) 
  12          #define FREQT0 1183 //Hz
  13          
  14          //сигнальные
  15          sbit P3_3 = P3^3;
  16          sbit LED = P1^6;
  17          sbit LED2 = P2^6;
  18          sbit BUTTON = P3^7;
  19          xdata unsigned char InitFlag;
  20          xdata unsigned int iter;
  21          
  22          //ADC
  23          sfr16 ADC0     = 0xbe;   // ADC0 data
  24          bit DavlFlag = 0;
  25          xdata long Result;                    
  26          xdata unsigned int_dec = 256;    
  27          xdata long accumulator = 0L;       
  28          //LIR
  29          sbit LIR_DATA = P2^0; //P2^2;
  30          sbit LIR_SCK = P2^1;
  31          
  32          xdata unsigned int LirData, LirTarget;
  33          xdata unsigned char shim_pr=0;
  34          xdata float A=0.0, A_zad=0.0, V=0.0, V_zad=0.0, V_pr=0.0, Accel=0, A_pr=0.0, tau=0.0, K = 40.0;
  35          
  36          typedef union INT {                   
  37             unsigned int i;
  38             unsigned char b[2];
  39          } INT;
  40          
  41          xdata unsigned int UgolMaxV = 4, Vmax = 200;
  42          xdata float taumax = 0.000031;
  43          //Veter
  44          bit VeterFlag = 0;
  45          sbit WSpeed = P1^1;
  46          sbit WAngle = P1^3;
  47          
  48          xdata float Vspeed=0, Angle=0;
  49          xdata unsigned long RTC, RTCV, RTCA;
  50          xdata unsigned long TV,TA;
  51          
  52          typedef union FLOAT {                   
  53             float f;
  54             unsigned char b[4];
  55          } FLOAT;
C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 2   

  56          //UART0
  57          #define NBFM            50
  58          xdata unsigned char BuferFromModem [NBFM]; 
  59          xdata unsigned char wBFM, rBFM, marBFM;
  60          xdata unsigned int u0timer;
  61          
  62          #define SIZE_BUFFER0            50
  63          xdata char BufferInModem[SIZE_BUFFER0]; 
  64          xdata int r0, rk;
  65          bit flTransmiter;       
  66          
  67          //GPS
  68          typedef union LINT {                   
  69             unsigned long i;
  70             unsigned char b[4];
  71          } LINT;
  72          #define NS      75
  73          xdata char mess [NS], r, w, mar;                
  74          bit flNewGPS;
  75          xdata unsigned int Vz, koors, flNoKoord, liTimer_tick_GPS, liTimer_tick;
  76          xdata unsigned long LatGnd=0, LonGnd=0;
  77          //------------------------------------------------------------------------------
  78          void OutModem1(unsigned char Data, char i)
  79          {
  80   1              BufferInModem[i] = Data | 0x80;
  81   1      }
  82          
  83          //------------------------------------------------------------------------------
  84          void OutModem2(unsigned int Data, char i)
  85          {
  86   1              BufferInModem[i] = (Data & 0x007f)| 0x80;
  87   1              BufferInModem[i+1] = ((Data & 0x3f80) >> 7)| 0x80;
  88   1      }
  89          
  90          //------------------------------------------------------------------------------
  91          void OutModem4(unsigned long int Data, char i)
  92          {
  93   1              BufferInModem[i] = (Data & 0x0000007f)| 0x80;
  94   1              BufferInModem[i+1] = ((Data & 0x3f80) >> 7) | 0x80;
  95   1              BufferInModem[i+2] = ((Data & 0x1fc000) >> 14) | 0x80;
  96   1         BufferInModem[i+3] = ((Data & 0xfe00000)>> 21) | 0x80;
  97   1      }
  98          //------------------------------------------------------------------------------------
  99          void main(void)
 100          {
 101   1      //ADC
 102   1              xdata long Pressure = 0;
 103   1              xdata float PressureFl = 0.0;
 104   1      //UART
 105   1      //   xdata char RK_code[26], nByte = 0, KontrSumma = 0, PWM;
 106   1      //        unsigned int Value;
 107   1              INT Aint;
 108   1              FLOAT Bfloat;
 109   1              LINT tmpLong;
 110   1      //GPS
 111   1         bit ValidGPS, flPoint;       
 112   1              xdata unsigned char i_comma, tmpGPS[6], nLetter = 7;
 113   1              xdata unsigned long temp_koord;
 114   1              xdata unsigned int i;
 115   1      
 116   1         xdata unsigned char chtmp;
 117   1              xdata int tmp;
C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 3   

 118   1      
 119   1              EA = 0;
 120   1              WDTCN     = 0xDE;       //выкл собаки
 121   1         WDTCN     = 0xAD;
 122   1              EA= 1;   
 123   1              
 124   1              LED=0;
 125   1      
 126   1              Port_IO_Init();
 127   1              Oscillator_Init();   
 128   1              Interrupts_Init(); 
 129   1              Timer_Init();
 130   1              UART0_Init();
 131   1         UART1_Init();
 132   1              PCA_Init();
 133   1         ADC_Init();
 134   1      
 135   1              LirTarget = 0x03ff;
 136   1      //      Fdelta = 0;
 137   1              flNewGPS = 0;
 138   1              u0timer=0;
 139   1              while(1)
 140   1              {
 141   2      //ADC
 142   2                      EIP2 |= 0x02;
 143   2                      if(DavlFlag==1)
 144   2                      {
 145   3                              EA = 0; 
 146   3                              Pressure =  Result * 2430 / 4095;
 147   3                              EA = 1; 
 148   3                              DavlFlag = 0;
 149   3                              PressureFl = PressureFl + (Pressure - PressureFl)*0.5;
 150   3                              LED2=!LED2;
 151   3                      }
 152   2      
 153   2      //Veter
 154   2                      if(VeterFlag==1)
 155   2                      {
 156   3                              Vspeed = (float)FREQT0/((float)TV*0.75);        //???
 157   3                              Angle = 360. - (360.*(float)TV/(float)TA);
 158   3                              VeterFlag = 0;
 159   3                      }
 160   2      
 161   2                      //GPS---------------------------------------------------------------------------
 162   2                      if(flNewGPS == 1)       
 163   2                      {
 164   3                              flNewGPS = 0;
 165   3                              if (r < w+mar*NS) 
 166   3                              {
 167   4                                      if(mess[r] == '$')
 168   4                                      {
 169   5                      nLetter = 0;
 170   5                                      }
 171   4                      else if ((nLetter == 0) && (mess[r] == 'G'))
 172   4                      nLetter++;
 173   4                      else if ((nLetter == 1) && (mess[r] == 'P'))
 174   4                      nLetter++;
 175   4                      else if ((nLetter == 2) && (mess[r] == 'R'))
 176   4                      nLetter++;
 177   4                       else if ((nLetter == 3) && (mess[r] == 'M'))
 178   4                       nLetter++;
 179   4                 else if ((nLetter == 4) && (mess[r] == 'C'))
C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 4   

 180   4                      {
 181   5                      nLetter++;
 182   5                                              i_comma = 0;
 183   5                                              ValidGPS = 0;
 184   5                 } 
 185   4                              else if(mess[r] == ',')
 186   4                                      {
 187   5                                              i_comma++;
 188   5                                              i = 0;
 189   5                                              flPoint = 0;
 190   5                                      }
 191   4                              else if(i_comma == 2)
 192   4                                      {
 193   5                                              if(mess[r] == 'A') 
 194   5                                                      ValidGPS = 1;
 195   5                                              else
 196   5                                              {
 197   6                                                      ValidGPS = 0;
 198   6              //                                      flNoKoord = 1;
 199   6              //                                      liTimer_tick_GPS = liTimer_tick;
 200   6                                              }
 201   5                                      }
 202   4                      else if (ValidGPS)
 203   4                                      {
 204   5                                              if (i_comma == 3)                                       //Latitude
 205   5                                              {
 206   6                                                      if(mess[r] == '.')
 207   6                                                      {
 208   7                                                              flPoint = 1;
 209   7                                                              i = 0;
 210   7                                                      }
 211   6                                                      else if (flPoint == 0)                                          //celaya chast
 212   6                                                      {
 213   7                                                              tmpGPS[i++] = mess[r];
 214   7                                                              if(i == 2)
 215   7                                                              {
 216   8                                              tmpGPS[i] = 0;
 217   8                                                                      temp_koord = atoi(tmpGPS);
 218   8                                              temp_koord = 60UL*10000*temp_koord;
 219   8                                                              }       
 220   7                                                              else if(i == 4)
 221   7                                                              {
 222   8                                                                      tmpGPS[0] = tmpGPS[1] = '0';
 223   8                                              tmpGPS[i] = 0;
 224   8                                              temp_koord = temp_koord+10000UL*atoi(tmpGPS);
 225   8                                                              }       
 226   7                                                      }
 227   6                                                      else                                                                                            //drobnaya chast
 228   6                                                      {
 229   7                                                              tmpGPS[i++] = mess[r];
 230   7                                      tmpGPS[i] = 0;
 231   7                                                      }
 232   6                                              }
 233   5                                              else if (i_comma == 4)
 234   5                                              {
 235   6                                      temp_koord = temp_koord+atoi(tmpGPS);
 236   6      //-----------
 237   6      //lLatGnd = 55UL*60*10000+50UL*10000+8680;
 238   6      //--------
 239   6                                                      if (mess[r] == 'S')                                             //znak Latitude
 240   6                                                              LatGnd = 54000000UL-temp_koord;         //90UL*60*10000-koord;
 241   6                                                      else              
C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 5   

 242   6                                                              LatGnd = 54000000UL+temp_koord;         //90UL*60*10000+koord;
 243   6                                              }
 244   5                                              else if (i_comma == 5)                          //Longitude
 245   5                                              {
 246   6                                                      if(mess[r] == '.')
 247   6                                                      {
 248   7                                                              flPoint = 1;
 249   7                                                              i = 0;
 250   7                                                      }
 251   6                                                      else if (flPoint == 0)                                          //celaya chast
 252   6                                                      {
 253   7                                                              tmpGPS[i++] = mess[r];
 254   7                                                              if(i == 3)
 255   7                                                              {
 256   8                                              tmpGPS[i] = 0;
 257   8                                              temp_koord = atoi(tmpGPS);
 258   8                                              temp_koord = 60UL*10000*temp_koord;
 259   8                                                              }       
 260   7                                                              else if(i == 5)
 261   7                                                              {
 262   8                                                                      tmpGPS[0] = tmpGPS[1] = tmpGPS[2] = '0';
 263   8                                              tmpGPS[i] = 0;
 264   8                                              temp_koord = temp_koord+10000UL*atoi(tmpGPS);
 265   8                                                              }       
 266   7                                                      }
 267   6                                                      else                                                                                            //drobnaya chast
 268   6                                                      {
 269   7                                                              tmpGPS[i++] = mess[r];
 270   7                                      tmpGPS[i] = 0;
 271   7                                                      }
 272   6                                              }
 273   5                                              else if (i_comma == 6)
 274   5                                              {
 275   6                                      temp_koord = temp_koord+atoi(tmpGPS);
 276   6      //----------------
 277   6      //lLonGnd = 49UL*60*10000+6UL*10000+3760;
 278   6      //----------------
 279   6                                                      if (mess[r] == 'W')                                             //znak Longitude
 280   6                                                              LonGnd = 108000000UL-temp_koord;                //180UL*60*10000-koord;
 281   6                                                      else       
 282   6                                                              LonGnd = temp_koord+108000000UL;                //180UL*60*10000;
 283   6                                              }
 284   5                                              else if (i_comma == 7)                                                  //skorost v uzlah
 285   5                                              {
 286   6                                                      if(mess[r] == '.')
 287   6                                                      {
 288   7                                                              flPoint = 1;
 289   7                                      Vz = 1.852*atoi(tmpGPS)/3.6;            //preobrazovat iz uzlov v m/s
 290   7      //---------
 291   7      //Vz = 20;
 292   7      //-----------
 293   7                                                      }
 294   6                                                      else if(flPoint == 0)
 295   6                                                      {
 296   7                                                              tmpGPS[i++] = mess[r];
 297   7                                      tmpGPS[i] = 0;
 298   7                                                      }
 299   6                      }
 300   5                                              else if (i_comma == 8)                                                  //kurs v gradusah
 301   5                                              {
 302   6                                                      if(mess[r] == '.')
 303   6                                                      {
C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 6   

 304   7                                                              flPoint = 1;
 305   7                                      koors = atoi(tmpGPS);
 306   7                              if (koors < 0)
 307   7                              koors = 360+koors;
 308   7                                                              flNoKoord = 0;
 309   7                                                              flNewGPS = 1;
 310   7                                                              liTimer_tick_GPS = liTimer_tick;        
 311   7              //                          OutModem20();
 312   7      //-----------                                              
 313   7      //koors = 30;
 314   7      //-----------
 315   7                                                      }
 316   6                                                      else if(flPoint == 0)
 317   6                                                      {
 318   7                                                              tmpGPS[i++] = mess[r];
 319   7                                      tmpGPS[i] = 0;
 320   7                                                      }
 321   6                          }
 322   5                                      }
 323   4                                      r++;
 324   4                              if(r >= NS)
 325   4                                      {
 326   5                              r = 0;
 327   5                                              mar = 0;        
 328   5                                      }      
 329   4                              }
 330   3                      }
 331   2      
 332   2                      //---------------------------------------------------------------------
 333   2      //              if(u0timer > (3*FREQT0))
 334   2                      if(flTransmiter == 0)
 335   2                      {
 336   3                              u0timer = 0;
 337   3                              if(wBFM > 4)
 338   3                              {
 339   4                              P3_3=!P3_3;
 340   4                                      chtmp = 0;
 341   4                                      for (i = 0; i < 5; i++ )
 342   4                                      chtmp = chtmp ^ BuferFromModem[i];
 343   4                                      chtmp = chtmp | 0x80;
 344   4                                      if(chtmp == BuferFromModem[5] && BuferFromModem[0] == (46 | 0x40))
 345   4                                      {
 346   5                                              tmp = BuferFromModem[1]&~0x80;
 347   5                              tmp |= ((int)(BuferFromModem[2]&~0x80)<<7);
 348   5                                              if(tmp<=360 && tmp>=0)
 349   5                                              {
 350   6                                                      A_zad = tmp;
 351   6                                                      tmp = BuferFromModem[3]&~0x80;
 352   6                                                      tmp |= ((int)(BuferFromModem[4]&~0x80)<<7);
 353   6                                                      K = tmp;
 354   6                                              }
 355   5                                      }
 356   4                                      wBFM = 0;
 357   4                              }
 358   3      
 359   3                              BufferInModem[0] = 0x40 | 40;                   
 360   3                              OutModem4(LatGnd, 1);
 361   3                              OutModem4(LonGnd, 5);
 362   3                              OutModem2((int)Angle, 9);
 363   3                              OutModem2((int)Vspeed, 11);
 364   3                              OutModem2((int)PressureFl, 13);
 365   3                      BufferInModem[15] = 0;
C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 7   

 366   3                              for (i = 0; i < 15; i++ )
 367   3                              BufferInModem[15] = BufferInModem[15] ^ BufferInModem[i];
 368   3                              BufferInModem[15] = 0x80 |      BufferInModem[15];
 369   3      
 370   3                              BufferInModem[16] = 0x40|41;
 371   3                              OutModem2((int)A, 17);
 372   3                      BufferInModem[19] = BufferInModem[16] ^ BufferInModem[17] ^ BufferInModem[18] | 0x80;
 373   3                              r0 = 0;
 374   3                              rk = 20;
 375   3                              //dopolnitelnye dannye
 376   3                              //A, A_zad, V, V_zad
 377   3                              /*tmp = (int)(A*10.);
 378   3                              OutModem2(tmp, 20);
 379   3                              tmp = (int)(A_zad*10.);
 380   3                              OutModem2(tmp, 22);
 381   3                              tmp = (int)(V*10.);
 382   3                              OutModem2(tmp, 24);
 383   3                              tmp = (int)(V_zad*10.);
 384   3                              OutModem2(tmp, 26);
 385   3                              rk+=8;*/
 386   3                              //      
 387   3                              flTransmiter = 1;
 388   3                              
 389   3                              SFRPAGE = 0x00;
 390   3                              TI0 = 1;
 391   3                      }
 392   2              }
 393   1      }
*** WARNING C280 IN LINE 107 OF SERVO6.C: 'Aint': unreferenced local variable
*** WARNING C280 IN LINE 108 OF SERVO6.C: 'Bfloat': unreferenced local variable
*** WARNING C280 IN LINE 109 OF SERVO6.C: 'tmpLong': unreferenced local variable
 394          //------------------------------------------------------------------------------------
 395          void INT0 (void) interrupt 0 //skorost vetra
 396          {
 397   1              EX0 =   0;
 398   1              VeterFlag = 1;
 399   1              TV = RTC - RTCV;
 400   1              RTCV = RTC;
 401   1              return;
 402   1      }
 403          
 404          //------------------------------------------------------------------------------------
 405          void TIMER_ISR0 (void) interrupt 1
 406          {
 407   1              xdata float tmp;
 408   1              xdata unsigned char shim;
 409   1      
 410   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 411   1              SFRPAGE = TIMER01_PAGE;
 412   1              RTC++;
 413   1              u0timer++;
 414   1              
 415   1              EA = 0; //опрос ЛИР
 416   1              LirData = 0;
 417   1                              
 418   1              LIR_SCK = 1;    //---init
 419   1              LIR_SCK = 0;
 420   1                              
 421   1              LIR_SCK = 1;    //---D n-1
 422   1              LIR_SCK = 0;
 423   1                              
 424   1              LIR_SCK = 1;    //---D n-1
C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 8   

 425   1              LIR_SCK = 0;
 426   1              if(LIR_DATA != 0) 
 427   1                      LirData = LirData | (0x01 << (11));
 428   1      
 429   1              LIR_SCK = 1; 
 430   1              LIR_SCK = 0;
 431   1              if(LIR_DATA != 0) 
 432   1                      LirData = LirData | (0x01 << (10));
 433   1      
 434   1              LIR_SCK = 1; 
 435   1              LIR_SCK = 0;
 436   1              if(LIR_DATA != 0) 
 437   1                      LirData = LirData | (0x01 << (9));
 438   1      
 439   1              LIR_SCK = 1; 
 440   1              LIR_SCK = 0;
 441   1              if(LIR_DATA != 0) 
 442   1                      LirData = LirData | (0x1 << (8));
 443   1      
 444   1              LIR_SCK = 1; 
 445   1              LIR_SCK = 0;
 446   1              if(LIR_DATA!=0) 
 447   1                      LirData = LirData | (0x1 << (7));
 448   1      
 449   1              LIR_SCK = 1; 
 450   1              LIR_SCK = 0;
 451   1              if(LIR_DATA!=0) 
 452   1                      LirData = LirData | (0x1 << (6));
 453   1      
 454   1              LIR_SCK = 1; 
 455   1              LIR_SCK = 0;
 456   1              if(LIR_DATA!=0) 
 457   1                      LirData = LirData | (0x1 << (5));
 458   1      
 459   1              LIR_SCK = 1; 
 460   1              LIR_SCK = 0;
 461   1              if(LIR_DATA!=0) 
 462   1                      LirData = LirData | (0x1 << (4));
 463   1      
 464   1              LIR_SCK = 1; 
 465   1              LIR_SCK = 0;
 466   1              if(LIR_DATA!=0) 
 467   1                      LirData = LirData | (0x1 << (3));
 468   1      
 469   1              LIR_SCK = 1; 
 470   1              LIR_SCK = 0;
 471   1              if(LIR_DATA!=0) 
 472   1                      LirData = LirData | (0x1 << (2));
 473   1      
 474   1              LIR_SCK = 1; 
 475   1              LIR_SCK = 0;
 476   1              if(LIR_DATA!=0) 
 477   1                      LirData = LirData | (0x1 << (1));
 478   1      
 479   1              LIR_SCK = 1; 
 480   1              LIR_SCK = 0;
 481   1              if(LIR_DATA!=0) 
 482   1                      LirData = LirData | (0x1 << (0));
 483   1      
 484   1              LIR_SCK = 1; 
 485   1              EA = 1;
 486   1              
C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 9   

 487   1              //управление антеной--------------------------------------------------
 488   1              tmp = 360.0/4095.0*LirData;
 489   1              if ((A > 270) && (tmp < 90))
 490   1              {
 491   2                      A = A+(tmp+360-A)/FREQT0*K;
 492   2                      if (A > 360)
 493   2                              A = A-360;
 494   2              }
 495   1              else if ((tmp > 270) && (A < 90))
 496   1              {
 497   2                      A = A+(tmp-A-360)/FREQT0*K;
 498   2                      if (A < 0)
 499   2                              A = A+360;
 500   2              }
 501   1              else
 502   1                      A = A+(tmp-A)/FREQT0*K;
 503   1      
 504   1              if ((A_pr > 270) && (A < 90))
 505   1                      V = V+((A+360-A_pr)*FREQT0-V)/FREQT0*K;
 506   1              else if ((A > 270) && (A_pr < 90))
 507   1                      V = V+((A-A_pr-360)*FREQT0-V)/FREQT0*K;
 508   1              else
 509   1                      V = V+((A-A_pr)*FREQT0-V)/FREQT0*K;
 510   1              A_pr = A;
 511   1      
 512   1              if (V > Vmax) 
 513   1                      V = Vmax;
 514   1              else if (V < -Vmax) 
 515   1                      V = -Vmax;
 516   1      
 517   1              V_zad = (A_zad-A);
 518   1              while (V_zad > 180)
 519   1            V_zad -= 360;
 520   1              while (V_zad < -180)
 521   1            V_zad += 360;
 522   1      
 523   1              V_zad = V_zad/UgolMaxV*Vmax;    
 524   1              if(V_zad > Vmax)        
 525   1                      V_zad = Vmax;
 526   1              else if(V_zad < -Vmax)  
 527   1                      V_zad = -Vmax;
 528   1      
 529   1              tau = (V_zad-V)/Vmax*taumax;
 530   1              if (tau > taumax)
 531   1                      tau = taumax;
 532   1              else if (tau < -taumax)
 533   1                      tau = -taumax;
 534   1              shim = 0xff-0x3f*fabs(tau)/taumax;      
 535   1      
 536   1              PCA0CN    = 0x40;
 537   1         PCA0MD    = 0x01;
 538   1              PCA0CPM0  = 0x43;
 539   1         PCA0CPM1  = 0x43;
 540   1              if (tau > 0.000002)
 541   1              {
 542   2                      PCA0CPH0  = 0xFF;
 543   2              PCA0CPH1  = shim;
 544   2              }
 545   1              else if(tau < -0.000002)
 546   1              {
 547   2                 PCA0CPH0  = shim;
 548   2              PCA0CPH1  = 0xFF;
C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 10  

 549   2              }
 550   1              else
 551   1              {
 552   2                 PCA0CPH0  = 0xFF;
 553   2              PCA0CPH1  = 0xFF;
 554   2              }
 555   1              if(WSpeed != 0)
 556   1                      EX0 = 1;
 557   1      
 558   1              if(WAngle != 0)
 559   1                      EX1 = 1;
 560   1      
 561   1              SFRPAGE = SFRPAGE_SAVE;
 562   1              return;
 563   1      }
 564          
 565          //------------------------------------------------------------------------------------
 566          void INT1 (void) interrupt 2 //napravl vetra
 567          {
 568   1              EX1=0;
 569   1              TA = RTC - RTCA;
 570   1              RTCA = RTC;
 571   1              return;
 572   1      }
 573          
 574          //------------------------------------------------------------------------------------
 575          void COM_UART0_isr(void) interrupt 4
 576          {
 577   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 578   1              SFRPAGE = UART0_PAGE;
 579   1              
 580   1              if (RI0)
 581   1              {
 582   2                      BuferFromModem [wBFM++] = SBUF0;  // read character
 583   2                      if(wBFM >= NBFM)
 584   2                      {
 585   3                      wBFM = 0;
 586   3                              marBFM = 1;
 587   3                      }
 588   2                      RI0 = 0;
 589   2              }
 590   1              if (TI0)
 591   1              {
 592   2                      if(r0 < rk)
 593   2                      {
 594   3                              SBUF0 = BufferInModem[r0++];
 595   3                      }
 596   2                      else
 597   2                      {
 598   3                              flTransmiter = 0;
 599   3                      }
 600   2                      TI0 = 0;
 601   2              }
 602   1              
 603   1              SFRPAGE = SFRPAGE_SAVE;
 604   1              return;
 605   1      }
 606          
 607          //-------------------------------------------------------------------
 608          
 609          void PCA_isr (void)interrupt 9 
 610          {
C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 11  

 611   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 612   1              SFRPAGE = PCA0_PAGE;
 613   1              CF = 0;                                                                                 //Сброс флага прерывания шимогенератора
 614   1              SFRPAGE = SFRPAGE_SAVE;
 615   1              return;
 616   1      }
 617          //-------------------------------------------------------------------
 618          
 619          void ADC0_ISR (void) interrupt 15
 620          {
 621   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 622   1              SFRPAGE = ADC0_PAGE;
 623   1              AD0INT = 0;                         // Clear ADC conversion complete
 624   1                                             // indicator
 625   1         accumulator += ADC0;                // Read ADC value and add to running
 626   1                                             // total
 627   1         int_dec--;                          // Update decimation counter
 628   1      
 629   1         if (int_dec == 0)                   // If zero, then post result
 630   1         {
 631   2                      int_dec = 256;                          // Reset counter
 632   2            Result = accumulator >> 8;
 633   2            accumulator = 0L;                // Reset accumulator
 634   2                      DavlFlag = 1;
 635   2                      EIP2  &= ~0x02;
 636   2         }
 637   1              SFRPAGE = SFRPAGE_SAVE;
 638   1              return;
 639   1      }
 640          //-------------------------------------------------------------------
 641          void GPS_UART1_isr(void) interrupt 20
 642          {
 643   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 644   1              SFRPAGE = UART1_PAGE;
 645   1              if (RI1)
 646   1              {
 647   2                      flNewGPS = 1;
 648   2                      mess [w++] = SBUF1;  // read character
 649   2                      if(w >= NS)
 650   2                      {
 651   3                      w = 0;
 652   3                              mar = 1;
 653   3                      }
 654   2                      RI1 = 0;
 655   2              }
 656   1              if (TI1)
 657   1              {
 658   2                              
 659   2              }
 660   1              SFRPAGE = SFRPAGE_SAVE;
 661   1              return;
 662   1      }
 663          
 664          
 665          //#endif
 666          
 667          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5185    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.00   SERVO6                                                                11/16/2012 08:22:47 PAGE 12  

   XDATA SIZE       =    295      35
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      17
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  3 WARNING(S),  0 ERROR(S)
