#include "c8051f120.h"
#include "init.h"
#include "comport.h"
#include <intrins.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h> 

//ioeaai?iua
sbit LED = P1^6;
sbit LED2 = P2^6;
sbit BUTTON = P3^7;
xdata unsigned char InitFlag;
//UART0---------------------------------------------------------------
#define UART0_BUFFERSIZE 64
unsigned char UART0_Buffer[UART0_BUFFERSIZE];
unsigned char UART0_Buffer_Size = 0; 
unsigned char UART0_Input_First = 0;
unsigned char UART0_Output_First = 0;
unsigned char TX_ReadyU0 =1;
static char ByteU0;
//UART1----------------------------------------------------------------------
#define UART1_BUFFERSIZE 64
unsigned char UART1_Buffer[UART1_BUFFERSIZE];
unsigned char UART1_Buffer_Size = 0;
unsigned char UART1_Input_First = 0;
unsigned char UART1_Output_First = 0;
unsigned char TX_ReadyU1 =1;
static char ByteU1;
//--------------
void main(void)
{
	long test=0;

	Init_Device();
	TX_ReadyU0 = 1;
	TX_ReadyU1 = 1;
	while(1)
	{
     SFRPAGE = UART0_PAGE;
	  if((TX_ReadyU0 == 1) && (UART0_Buffer_Size != 0) && (ByteU0 == 13))  
	  { 
         TX_ReadyU0 = 0;                  // Set the flag to zero
         TI0 = 1;                       // Set transmit flag to 1
			SFRPAGE = UART0_PAGE;
	      printf("Test: %ld mV\n", test);
	  } 
	}
}

void UART0_Interrupt (void) interrupt 4
{
   SFRPAGE = UART0_PAGE;

   if (RI0 == 1)
   {
      if( UART0_Buffer_Size == 0)  {      // If new word is entered
         UART0_Input_First = 0;    }

      RI0 = 0;                           // Clear interrupt flag

      ByteU0 = SBUF0;                      // Read a character from UART

      if (UART0_Buffer_Size < UART0_BUFFERSIZE)
      {
         UART0_Buffer[UART0_Input_First] = ByteU0; // Store in array

         UART0_Buffer_Size++;             // Update array's size

         UART0_Input_First++;             // Update counter
      }
   }

   if (TI0 == 1)                   // Check if transmit flag is set
   {
      TI0 = 0;                           // Clear interrupt flag

      if (UART0_Buffer_Size != 1)         // If buffer not empty
      {
         // If a new word is being output
         if ( UART0_Buffer_Size == UART0_Input_First ) {
              UART0_Output_First = 0;  }

         // Store a character in the variable byte
         ByteU0 = UART0_Buffer[UART0_Output_First];

         if ((ByteU0 >= 0x61) && (ByteU0 <= 0x7A)) { // If upper case letter
            ByteU0 -= 32; }

         SBUF0 = ByteU0;                   // Transmit to Hyperterminal

         UART0_Output_First++;            // Update counter

         UART0_Buffer_Size--;             // Decrease array size

      }
      else
      {
         UART0_Buffer_Size = 0;            // Set the array size to 0
         TX_ReadyU0 = 1;                    // Indicate transmission complete
      }
   }
}	

void UART1_Interrupt (void) interrupt 20
{
   if (RI1 == 1)
   {
      if( UART1_Buffer_Size == 0)  {      // If new word is entered
         UART1_Input_First = 0;    }

      RI1 = 0;                           // Clear interrupt flag

      ByteU1 = SBUF1;                      // Read a character from UART

      if (UART1_Buffer_Size < UART1_BUFFERSIZE)
      {
         UART1_Buffer[UART1_Input_First] = ByteU1; // Store in array

         UART1_Buffer_Size++;             // Update array's size

         UART1_Input_First++;             // Update counter
      }
   }

   if (TI1 == 1)                         // Check if transmit flag is set
   {
      TI1 = 0;                           // Clear interrupt flag

      if (UART1_Buffer_Size != 1)         // If buffer not empty
      {
         // If a new word is being output
         if ( UART1_Buffer_Size == UART1_Input_First ) {
              UART1_Output_First = 0;  }

         // Store a character in the variable byte
         ByteU1 = UART1_Buffer[UART1_Output_First];

         if ((ByteU1 >= 0x61) && (ByteU1 <= 0x7A)) { // If upper case letter
            ByteU1 -= 32; }

         SBUF1 = ByteU1;                   // Transmit to Hyperterminal

         UART1_Output_First++;            // Update counter

         UART1_Buffer_Size--;             // Decrease array size

      }
      else
      {
         UART1_Buffer_Size = 0;            // Set the array size to 0
         TX_ReadyU1 = 1;                    // Indicate transmission complete
      }
   }
}



//#endif

/*      

//#define SYSCLK 43200000 //Hz
//#define FREQT0 8006     //Hz
/*
//ioeaai?iua
sbit LED = P1^6;
sbit LED2 = P2^6;
sbit BUTTON = P3^7;
xdata unsigned char InitFlag;
//--------------

//ee?
sbit LIR_DATA = P2^2; //P2^0;
sbit LIR_SCK = P2^1;

xdata unsigned char F;
xdata unsigned int delta, LirData, LirTarget, Fdelta;

typedef union INT {                   
   unsigned int i;
   unsigned char b[2];
} INT;
//---
//aaoa?
xdata unsigned char VeterFlag = 0;
sbit WSpeed = P1^1;
sbit WAngle = P1^3;

xdata float Vspeed, Angle;
xdata unsigned long RTC, RTCV, RTCA;
xdata unsigned long TV,TA;

typedef union FLOAT {                   
   float f;
   unsigned char b[4];
} FLOAT;
//-----
//UART0
#define NBFM 		50
xdata unsigned char BuferFromModem [NBFM]; 
xdata unsigned char wBFM, rBFM, marBFM;
xdata unsigned int u0timer;

#define SIZE_BUFFER0 		50
xdata char BufferInModem[SIZE_BUFFER0]; // Aey ioi?aaee a iineaaiaaoaeuiue ii?o
xdata int r0, rk;
bit flTransmiter;	

//GPS
#define NS 	75
xdata unsigned int GPStimepulse;
xdata char mess [NS], r, w, mar;		// Aey aiaeeca iinueee GPS
bit flNewGPS;
xdata unsigned int Vz, koors, flNoKoord, liTimer_tick_GPS, liTimer_tick;
xdata unsigned long LatFly, LonFly;

//ADC
xdata long Result;                           // ADC0 decimated value
xdata unsigned int_dec = 256;    // Integrate/decimate counter
                                        // we post a new result when
                                       // int_dec = 0
xdata long accumulator = 0L;         // Here's where we integrate the
                                       // ADC samples    
xdata long measurement;
xdata unsigned int  ADCcount = 0;
/*

void LirQ(void)
{
	xdata char SFRPAGE_SAVE = SFRPAGE;
	SFRPAGE = 0x00;

		//Ii?in EE?----------------------------
	//	EA=0;
		LirData = 0x0000;
		//---init
		LIR_SCK = 1;
		LIR_SCK = 0;
		//---D n-1
		LIR_SCK = 1;
		LIR_SCK = 0;
		//---D n-1
		LIR_SCK = 1;
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (11));
		}
		LIR_SCK = 1; 
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (10));
		}
		LIR_SCK = 1; 
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (9));
		}
		LIR_SCK = 1; 
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (8));
		}
		LIR_SCK = 1; 
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (7));
		}
		LIR_SCK = 1; 
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (6));
		}
		LIR_SCK = 1; 
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (5));
		}
		LIR_SCK = 1; 
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (4));
		}
		LIR_SCK = 1; 
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (3));
		}
		LIR_SCK = 1; 
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (2));
		}
		LIR_SCK = 1; 
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (1));
		}
		LIR_SCK = 1; 
		LIR_SCK = 0;
		if(LIR_DATA!=0) 
		{
			LirData = LirData | (0x1 << (0));
		}
		LIR_SCK = 1; 
	//	EA=1;
	SFRPAGE = SFRPAGE_SAVE;
	return;
}*/
//------------------------------------------------------------------------------------------


/*
void main(void)
{
	//---------
	xdata unsigned int i;
  	INT Aint;
	FLOAT Bfloat;
	//UART----------
   xdata char RK_code[26], nByte = 0, KontrSumma = 0, PWM;
	unsigned int Value;
	//--------------
   bit ValidGPS, flPoint; 	
	xdata unsigned char i_comma, tmpGPS[6], nLetter = 7;
	xdata unsigned long temp_koord;
	//SMBus---------
	unsigned char check;             // Used for testing purposes
	//--------------

	Init_Device();

	LirTarget = 0x03ff;
	Fdelta = 0;
	flNewGPS = 0;

	SM_BUSY = 0;                     // Free SMBus for first transfer.
   while(1)
	{
	
	
//?an?ao nei?inoe aao?a e oaea--------------------------------------------------------------
		if(VeterFlag)
		{
			Vspeed = (float)FREQT0/((float)TV*0.75);
			Angle = 360. - (360.*(float)TV/(float)TA);
			VeterFlag = 0;
		}

//Ii?in GPS---------------------------------------------------------------------------

		if(flNewGPS)	
		{
			flNewGPS = 0;
		//?anoeo?iaea iinueee GPS
			if (r < w+mar*NS) 
			{
				if(mess[r] == '$')
				{
            	nLetter = 0;
				}
         	else if ((nLetter == 0) && (mess[r] == 'G'))
            	nLetter++;
         	else if ((nLetter == 1) && (mess[r] == 'P'))
            	nLetter++;
         	else if ((nLetter == 2) && (mess[r] == 'R'))
            	nLetter++;
	         else if ((nLetter == 3) && (mess[r] == 'M'))
   	         nLetter++;
      	   else if ((nLetter == 4) && (mess[r] == 'C'))
         	{
            	nLetter++;
					i_comma = 0;
					ValidGPS = 0;
      	   } 
		   	else if(mess[r] == ',')
				{
					i_comma++;
					i = 0;
					flPoint = 0;
				}
		   	else if(i_comma == 2)
				{
					if(mess[r] == 'A') 
						ValidGPS = 1;
					else
					{
						ValidGPS = 0;
	//					flNoKoord = 1;
	//					liTimer_tick_GPS = liTimer_tick;
					}
				}
         	else if (ValidGPS)
				{
					if (i_comma == 3)                			//Latitude
					{
						if(mess[r] == '.')
						{
							flPoint = 1;
							i = 0;
						}
						else if (flPoint == 0)						//Oaeay ?anou
						{
							tmpGPS[i++] = mess[r];
							if(i == 2)
							{
		      		   	tmpGPS[i] = 0;
								temp_koord = atoi(tmpGPS);
   			      		temp_koord = 60UL*10000*temp_koord;
							}	
							else if(i == 4)
							{
								tmpGPS[0] = tmpGPS[1] = '0';
			      	   	tmpGPS[i] = 0;
   				      	temp_koord = temp_koord+10000UL*atoi(tmpGPS);
							}	
						}
						else												//A?iaiay ?anou
						{
							tmpGPS[i++] = mess[r];
	      		   	tmpGPS[i] = 0;
						}
					}
					else if (i_comma == 4)
					{
		      		temp_koord = temp_koord+atoi(tmpGPS);
//-----------
//lLatFly = 55UL*60*10000+50UL*10000+8680;
//--------
						if (mess[r] == 'S')   						//ciae Latitude
							LatFly = 54000000UL-temp_koord;		//90UL*60*10000-koord;
						else		  
							LatFly = 54000000UL+temp_koord;		//90UL*60*10000+koord;
					}
					else if (i_comma == 5)                		//Longitude
					{
						if(mess[r] == '.')
						{
							flPoint = 1;
							i = 0;
						}
						else if (flPoint == 0)						//Oaeay ?anou
						{
							tmpGPS[i++] = mess[r];
							if(i == 3)
							{
		      		   	tmpGPS[i] = 0;
   			      		temp_koord = atoi(tmpGPS);
   			      		temp_koord = 60UL*10000*temp_koord;
							}	
							else if(i == 5)
							{
								tmpGPS[0] = tmpGPS[1] = tmpGPS[2] = '0';
			      	   	tmpGPS[i] = 0;
   				      	temp_koord = temp_koord+10000UL*atoi(tmpGPS);
							}	
						}
						else												//A?iaiay ?anou
						{
							tmpGPS[i++] = mess[r];
	      		   	tmpGPS[i] = 0;
						}
					}
					else if (i_comma == 6)
					{
		      		temp_koord = temp_koord+atoi(tmpGPS);
//----------------
//lLonFly = 49UL*60*10000+6UL*10000+3760;
//----------------
						if (mess[r] == 'W')   						//ciae Longitude
							LonFly = 108000000UL-temp_koord;		//180UL*60*10000-koord;
						else       
							LonFly = temp_koord+108000000UL;		//180UL*60*10000;
					}
					else if (i_comma == 7)							//nei?inou a oceao
					{
						if(mess[r] == '.')
						{
							flPoint = 1;
   		      		Vz = 1.852*atoi(tmpGPS)/3.6;   		//I?aia?aciaaou ec oceia a i/n
//---------
//Vz = 20;
//-----------
						}
						else if(flPoint == 0)
						{
							tmpGPS[i++] = mess[r];
	      	   		tmpGPS[i] = 0;
						}
            	}
					else if (i_comma == 8)							//eo?n a a?aaonao
					{
						if(mess[r] == '.')
						{
							flPoint = 1;
   		      		koors = atoi(tmpGPS);
                  	if (koors < 0)
                     	koors = 360+koors;
							flNoKoord = 0;
							flNewGPS = 1;
							liTimer_tick_GPS = liTimer_tick;	
	//		            OutModem20();
//-----------						   
//koors = 30;
//-----------
						}
						else if(flPoint == 0)
						{
							tmpGPS[i++] = mess[r];
	      		   	tmpGPS[i] = 0;
						}
	            }
				}
				r++;
	   		if(r >= NS)
				{
   	   		r = 0;
					mar = 0;	
				}      
			}
		}
	
//Ii?in SMBus-------------------------------------------------------------------------

if(u0timer>0xf0)
{
	SM_Send(CHIP_A, 0x00, 0x1e);      // Send CHIP, address, (data)
//	SM_Send(CHIP_A, 0x00, 0x05);      // Send CHIP, address, (data)
//	while(SMB0DAT!=0); 
//	check = SM_Receive(CHIP_A, 0x00); // Read address on CHIP
}


//?aaioa n COM ii?oii-----------------------------------------------------------------

		if(u0timer>0xf0)
		{
			u0timer = 0;
			//	ES0=1;
			if(wBFM > 4)
			{
				if(BuferFromModem [wBFM-1]==0x41)
				{
					if(BuferFromModem [wBFM-4]==0x40)
					{
						Aint.b[0] = BuferFromModem[wBFM-3];
						Aint.b[1] = BuferFromModem[wBFM-2];
						if(Aint.i<=0x0fff)
						{
							LirTarget = Aint.i;
						}
					}	
				}
				wBFM = 0;
			}
			//	TI0 = 1; //Read redy UART0
			//Write to UART0--------------------------------------
			Aint.i = LirData;
			BufferInModem[0] = 0x40+1;
			BufferInModem[1] = Aint.b[0];		
			BufferInModem[2] = Aint.b[1];
			Bfloat.f= Vspeed; 
			BufferInModem[3] = Bfloat.b[0];
			BufferInModem[4] = Bfloat.b[1];
			BufferInModem[5] = Bfloat.b[2];
			BufferInModem[6] = Bfloat.b[3];
			Bfloat.f= Angle;
			BufferInModem[7] = Bfloat.b[0];
			BufferInModem[8] = Bfloat.b[1];
			BufferInModem[9] = Bfloat.b[2];
			BufferInModem[10] = Bfloat.b[3];
			BufferInModem[11] = 0x40;
  		   BufferInModem[12] = 0;
  	   	for (i = 0; i < 12; i++ )
		     	BufferInModem[12] = BufferInModem[12] ^ BufferInModem[i];
    	 	BufferInModem[12] = 0x80 | BufferInModem[12];

			flTransmiter = 1;
	
   		r0 = 0;
  		 	rk = 13;
			SFRPAGE = 0x00;

			while (flTransmiter)
			{
				if(r0 < rk)
				{
					flTransmiter = 1;
					SBUF0 = BufferInModem[r0++];
				}
				else
				{
					flTransmiter = 0;
				}
			}
	//		ES0=0;

	//------------------------------------------------------------
	}
}
*/
/*
//------------------------------------------------------------------------------------------
//nei?inou aao?a
void INT0 (void) interrupt 0
{
	VeterFlag = 1;
	TV = RTC - RTCV;
	RTCV = RTC;
	EX0 =	0;
	return;
}

//------------------------------------------------------------------------------------
void TIMER_ISR0 (void) interrupt 1
{
	xdata unsigned int i, delta, FdKoeff;
	xdata char SFRPAGE_SAVE = SFRPAGE;
	SFRPAGE = TIMER01_PAGE;
	RTC++;
	GPStimepulse++;
	
	if(GPStimepulse==0x4b00)
	{
		LED=1;
	}
	else if(GPStimepulse>0x5355)
	{
		LED=0;
		GPStimepulse=0;
	}
//aaoa?-------------
	if(WSpeed!=0)
		EX0=1;

	if(WAngle!=0)
		EX1=1;

	SFRPAGE = SFRPAGE_SAVE;
	return;
}



//iai?aaeaiea aao?a-------------------------------------------------------------------
void INT1 (void) interrupt 2
{
	VeterFlag = 1;
	TA = RTC - RTCA;
	RTCA = RTC;
  	EX1=0;
	return;
}

//------------------------------------------------------------------------------------
void TIMER_ISR1 (void) interrupt 3
{
	xdata char SFRPAGE_SAVE = SFRPAGE;
	SFRPAGE = TIMER01_PAGE;
	
	SFRPAGE = SFRPAGE_SAVE;
	return;
}

//-------------------------------------------------------------------
void COM_UART0_isr(void) interrupt 4
{
	xdata char SFRPAGE_SAVE = SFRPAGE;
	INT Aint;
	SFRPAGE = UART0_PAGE;

	if (RI0)
  	{
		BuferFromModem [wBFM++] = SBUF0;  // read character
		if(wBFM >= NBFM)
		{
     		wBFM = 0;
			marBFM = 1;
		}
	  	RI0 = 0;
	}
	if (TI0)
	{
		if(flTransmiter == 0)
			TI0 = 0;	
  	}

	SFRPAGE = UART1_PAGE;
	if (RI1)
  	{
		flNewGPS = 1;
		mess [w++] = SBUF1;  // read character
		if(w >= NS)
		{
     		w = 0;
			mar = 1;
		}
		RI1 = 0;
	}
	SFRPAGE = SFRPAGE_SAVE;
	return;
}

//------------------------------------------------------------------------------------
void SMBus_isr (void)interrupt 7
{
	xdata char SFRPAGE_SAVE = SFRPAGE;
	SFRPAGE = SMB0_PAGE;
	
   switch (SMB0STA){                   // Status code for the SMBus (SMB0STA register)

      // Master Transmitter/Receiver: START condition transmitted.
      // The R/W bit of the COMMAND word sent after this state will
      // always be a zero (W) because for both read and write,
      // the memory address must be written first.
      case SMB_START:
         SMB0DAT = (COMMAND & 0xFE);   // Load address of the slave to be accessed.
         STA = 0;                      // Manually clear START bit
         break;

      // Master Transmitter/Receiver: Repeated START condition transmitted.
      // This state should only occur during a read, after the memory address has been
      // sent and acknowledged.
      case SMB_RP_START:
         SMB0DAT = COMMAND;            // COMMAND should hold slave address + R.
         STA = 0;
         break;

      // Master Transmitter: Slave address + WRITE transmitted.  ACK received.
      case SMB_MTADDACK:
         SMB0DAT = HIGH_ADD;           // Load high byte of memory address
                                       // to be written.
         break;

      // Master Transmitter: Slave address + WRITE transmitted.  NACK received.
      // The slave is not responding.  Send a STOP followed by a START to try again.
      case SMB_MTADDNACK:
         STO = 1;
         STA = 1;
         break;

      // Master Transmitter: Data byte transmitted.  ACK received.
      // This state is used in both READ and WRITE operations.  Check BYTE_NUMBER
      // for memory address status - if only HIGH_ADD has been sent, load LOW_ADD.
      // If LOW_ADD has been sent, check COMMAND for R/W value to determine 
      // next state.
      case SMB_MTDBACK:
         switch (BYTE_NUMBER){
            case 2:                    // If BYTE_NUMBER=2, only HIGH_ADD
               SMB0DAT = LOW_ADD;      // has been sent.
               BYTE_NUMBER--;          // Decrement for next time around.
               break;
            case 1:                    // If BYTE_NUMBER=1, LOW_ADD was just sent.
               if (COMMAND & 0x01){    // If R/W=READ, sent repeated START.
                  STO = 0;
                  STA = 1;

               } else { 
                  SMB0DAT = WORD;      // If R/W=WRITE, load byte to write.
                  BYTE_NUMBER--;
               }
               break;
            default:                   // If BYTE_NUMBER=0, transfer is finished.
               STO = 1;
               SM_BUSY = 0;            // Free SMBus
            }
         break;


      // Master Transmitter: Data byte transmitted.  NACK received.
      // Slave not responding.  Send STOP followed by START to try again.
      case SMB_MTDBNACK:
         STO = 1;
         STA = 1;
         break;

      // Master Transmitter: Arbitration lost.
      // Should not occur.  If so, restart transfer.
      case SMB_MTARBLOST:
         STO = 1;
         STA = 1;
         break;

      // Master Receiver: Slave address + READ transmitted.  ACK received.
      // Set to transmit NACK after next transfer since it will be the last (only)
      // byte.
      case SMB_MRADDACK:
         AA = 0;                       // NACK sent on acknowledge cycle.
         break;

      // Master Receiver: Slave address + READ transmitted.  NACK received.
      // Slave not responding.  Send repeated start to try again.
      case SMB_MRADDNACK:
         STO = 0;
         STA = 1;
         break;

      // Data byte received.  ACK transmitted.
      // State should not occur because AA is set to zero in previous state.
      // Send STOP if state does occur.
      case SMB_MRDBACK:
         STO = 1;
         SM_BUSY = 0;
         break;

      // Data byte received.  NACK transmitted.
      // Read operation has completed.  Read data register and send STOP.
      case SMB_MRDBNACK:
         WORD = SMB0DAT;
         STO = 1;
         SM_BUSY = 0;                  // Free SMBus
         break;

      // All other status codes meaningless in this application. Reset communication.
      default:
         STO = 1;                      // Reset communication.
         SM_BUSY = 0;
         break;
      }

   SI=0;                               // clear interrupt flag

	SFRPAGE = SFRPAGE_SAVE;
	return;
}

//------------------------------------------------------------------------------------
void PCA_isr (void)interrupt 9
{
	xdata char SFRPAGE_SAVE = SFRPAGE;
	SFRPAGE = PCA0_PAGE;
//-------------------
	u0timer++; // COM u0
//	u1timer++; // GPS u1
//-------------------	
	CF = 0;
//oi?aaeaiea aioaiie------------------------------------------------------------------------
		if(F==0x02)
		{
			LirQ();
			delta = (LirTarget - LirData);	
			if(delta > 0xF000)
				delta = delta - 0xF000;
			if(delta >= 0x07FF)
			{
				delta = 0x0FFF - delta;
				if(delta < 0x0155)
				{
					F = 0xC1;
					if(delta < 0x20 && delta > 0x0B)
					{
						F = 0xC1;
					}
					else if(delta <= 0x0B)
					{
						F = 0x03; 
					}
				}
				else
				{
					F=0xA1;
				}
			}
			else if(delta < 0x07FF)
			{
				if(delta < 0x0155)
				{
					F = 0xC2;
					if(delta < 0x20 && delta > 0x0B)
					{
						F = 0xC2;
					} 
					else if(delta <= 0x0B)
					{
						F = 0x03; 
					}
				}
				else
				{
					F=0xA2;
				}
			}
		}
	   if(LirData==0x0FFF)//i?e ioee??aiiii ee?, aicaaenoaea ionoonoaoao
		{
			F=0x03;
		}
		//OEIu ia iaoeieo--------------------------
		PCA0CPM0  = 0x43;
		PCA0CPH0  = 0xFF;
		PCA0CPL0  = 0xFF;
		PCA0CPM1  = 0x43;
		PCA0CPH1  = 0xFF;
		PCA0CPL1  = 0xFF;

		if(F==0xA1)
		{
			PCA0CPM0  = 0x43;
			PCA0CPH0  = 0xC0;
			PCA0CPM1  = 0x43;
			PCA0CPH1  = 0xFF;
			PCA0CPL1  = 0xFF;
			Fdelta = Fdelta -  delta;
			if(Fdelta>0x0033)
			{
				PCA0CPM0  = 0x43;
				PCA0CPH0  = 0xf0;
				PCA0CPM1  = 0x43;
				PCA0CPH1  = 0xFF;
				PCA0CPL1  = 0xFF;
			}
			else
			{
				PCA0CPH0  = 0xC0 + Fdelta;
			}
			Fdelta = delta;
		}
		else if(F==0xA2)
		{
			PCA0CPM1  = 0x43;
			PCA0CPH1  = 0xC0;
			PCA0CPM0  = 0x43;
			PCA0CPH0  = 0xFF;
			PCA0CPL0  = 0xFF;
			Fdelta = Fdelta -  delta;			
			if(Fdelta>0x0033)
			{
				PCA0CPM1  = 0x43;
				PCA0CPH1  = 0xf0;
				PCA0CPM0  = 0x43;
				PCA0CPH0  = 0xFF;
				PCA0CPL0  = 0xFF;
			}
			else
			{
				PCA0CPH1  = 0xC0 + Fdelta;
			}
			Fdelta = delta;
		}
		else if(F==0xC1)
		{
			PCA0CPM0  = 0x43;
			PCA0CPH0  = 0xe6;
			PCA0CPM1  = 0x43;
			PCA0CPH1  = 0xFF;
			PCA0CPL1  = 0xFF;
			Fdelta = Fdelta -  delta;
			if(Fdelta>0x0019)
			{
				PCA0CPM0  = 0x43;
				PCA0CPH0  = 0xFF;
				PCA0CPL0  = 0xFF;
				PCA0CPM1  = 0x43;
				PCA0CPH1  = 0xFF;
				PCA0CPL1  = 0xFF;
			}
			else
			{
				PCA0CPH0  = 0xe6 + Fdelta;
			}
			Fdelta = delta;
		}
		else if(F==0xC2)
		{
			PCA0CPM1  = 0x43;
			PCA0CPH1  = 0xe6;
			PCA0CPM0  = 0x43;
			PCA0CPH0  = 0xFF;
			PCA0CPL0  = 0xFF;
			Fdelta = Fdelta -  delta;
			if(Fdelta>0x0019)
			{
				PCA0CPM0  = 0x43;
				PCA0CPH0  = 0xFF;
				PCA0CPL0  = 0xFF;
				PCA0CPM1  = 0x43;
				PCA0CPH1  = 0xFF;
				PCA0CPL1  = 0xFF;
			}
			else
			{
				PCA0CPH1  = 0xe6 + Fdelta;
			}
			Fdelta = delta;
		}  
		if(F==0x03)
		{
		   PCA0CPM0  = 0x43;
			PCA0CPH0  = 0xFF;
			PCA0CPL0  = 0xFF;
			PCA0CPM1  = 0x43;
			PCA0CPH1  = 0xFF;
			PCA0CPL1  = 0xFF;
		}
		F=0x02;
	SFRPAGE = SFRPAGE_SAVE;
	return;
}

//-------------------------------------------------------------------
void GPS_UART1_isr(void) interrupt 20
{
	xdata char SFRPAGE_SAVE = SFRPAGE;
	SFRPAGE = UART1_PAGE;
	if (RI1)
  	{
		flNewGPS = 1;
		mess [w++] = SBUF1;  // read character
		if(w >= NS)
		{
     		w = 0;
			mar = 1;
		}
		RI1 = 0;
	}
	if (TI1)
	{
			
  	}

	SFRPAGE = SFRPAGE_SAVE;
	return;
}*/
/*
void main(void)
{
	Init_Device();
	
   SFRPAGE = ADC0_PAGE;
   AD0EN = 1;   
	SFRPAGE = TMR3_PAGE;                      
	TF3 = 0;

   while(1)
	{
		if(ADCcount==0xff)
		{
	      ADCcount = 0;
			SFRPAGE = CONFIG_PAGE;
			LED = !LED; 
		                      // Measured voltage in mV

     // The 12-bit ADC value is averaged across INT_DEC measurements.  The result is 
      // then stored in Result, and is right-justified 
      // The measured voltage applied to AIN 0.1 is then:
      //
      //                           Vref (mV)
      //   measurement (mV) =   --------------- * Result (bits) 
      //                       (2^12)-1 (bits)

         measurement =  Result * 2430 / 4095;
   		SFRPAGE = UART0_PAGE;
		   printf("AIN0.1 voltage: %ld mV\n",measurement);
	 	}
	}
}
//------------------------------------------------------------------------------------
void TIMER_ISR3 (void) interrupt 14
{
	xdata char SFRPAGE_SAVE = SFRPAGE;
	SFRPAGE = TMR3_PAGE;
	
	TF3 = 0;
	ADCcount++;

	SFRPAGE = SFRPAGE_SAVE;
	return;
}
//-----------------------------------------------------------------------------

void ADC0_ISR (void) interrupt 15
{
  	xdata char SFRPAGE_SAVE = SFRPAGE;
	SFRPAGE = ADC0_PAGE;
	 
	AD0INT = 0;                         // Clear ADC conversion complete
                                       // indicator
   accumulator += ADC0L;                // Read ADC value and add to running
                                       // total
   int_dec--;                          // Update decimation counter

   if (int_dec == 0)                   // If zero, then post result
   {
      int_dec = 256;               // Reset counter
      Result = accumulator >> 8;
      accumulator = 0L;                // Reset accumulator
   }
	SFRPAGE = SFRPAGE_SAVE;
	return;
}
//------------------------------------------------------------------------------------------
*/

