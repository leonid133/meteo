C51 COMPILER V9.00   SERVO5                                                                10/03/2012 13:38:05 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SERVO5
OBJECT MODULE PLACED IN servo5.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe servo5.c DB OE BR

line level    source

   1          
   2          #include "c8051f120.h"
   3          #include "init.h"
   4          #include "comport.h"
   5          #include <intrins.h>
   6          #include <ctype.h>
   7          #include <stdio.h>
   8          #include <stdlib.h>
   9          #include <math.h> 
  10          //system
  11          #define SYSCLK       (24856840L * 1 / 1) 
  12          #define FREQT0 1166 //Hz
  13          #define PCACLK  1166
  14          
  15          //отладочные
  16          sbit P3_3 = P3^3;
  17          sbit LED = P1^6;
  18          sbit LED2 = P2^6;
  19          sbit BUTTON = P3^7;
  20          xdata unsigned char InitFlag;
  21          xdata unsigned int iter;
  22          
  23          //ADC
  24          sfr16 ADC0     = 0xbe;   // ADC0 data
  25          bit DavlFlag = 0;
  26          xdata long Result;                    
  27          xdata unsigned int_dec = 256;    
  28          xdata long accumulator = 0L;       
  29          //LIR
  30          sbit LIR_DATA = P2^2; //P2^0;
  31          sbit LIR_SCK = P2^1;
  32          
  33          //xdata unsigned char F;
  34          //xdata unsigned int delta, LirData, LirTarget, Fdelta, Olddelta;
  35          xdata unsigned int LirData, LirTarget;
  36          //xdata unsigned int v_anteny=0, v_zadan, t_zadan;
  37          xdata unsigned char shim_pr=0;
  38          xdata float A=0.0, A_zad=0.0, V=0.0, V_zad=0.0, V_pr=0.0, Accel=0, A_pr=0.0, tau=0.0;
  39          
  40          typedef union INT {                   
  41             unsigned int i;
  42             unsigned char b[2];
  43          } INT;
  44          //Veter
  45          bit VeterFlag = 0;
  46          sbit WSpeed = P1^1;
  47          sbit WAngle = P1^3;
  48          
  49          xdata float Vspeed, Angle;
  50          xdata unsigned long RTC, RTCV, RTCA;
  51          xdata unsigned long TV,TA;
  52          
  53          typedef union FLOAT {                   
  54             float f;
  55             unsigned char b[4];
C51 COMPILER V9.00   SERVO5                                                                10/03/2012 13:38:05 PAGE 2   

  56          } FLOAT;
  57          //UART0
  58          #define NBFM            50
  59          xdata unsigned char BuferFromModem [NBFM]; 
  60          xdata unsigned char wBFM, rBFM, marBFM;
  61          xdata unsigned int u0timer;
  62          
  63          #define SIZE_BUFFER0            50
  64          xdata char BufferInModem[SIZE_BUFFER0]; 
  65          xdata int r0, rk;
  66          bit flTransmiter;       
  67          
  68          //GPS
  69          #define NS      75
  70          xdata char mess [NS], r, w, mar;                
  71          bit flNewGPS;
  72          xdata unsigned int Vz, koors, flNoKoord, liTimer_tick_GPS, liTimer_tick;
  73          xdata unsigned long LatFly, LonFly;
  74          
  75          //------------------------------------------------------------------------------------
  76          void main(void)
  77          {
  78   1      //ADC
  79   1              xdata long Pressure=0;
  80   1      //UART
  81   1      //   xdata char RK_code[26], nByte = 0, KontrSumma = 0, PWM;
  82   1      //        unsigned int Value;
  83   1              INT Aint;
  84   1              FLOAT Bfloat;
  85   1      //GPS
  86   1         bit ValidGPS, flPoint;       
  87   1              xdata unsigned char i_comma, tmpGPS[6], nLetter = 7;
  88   1              xdata unsigned long temp_koord;
  89   1              xdata unsigned int i;
  90   1      
  91   1              EA = 0;
  92   1              WDTCN     = 0xDE;       //выкл собаки
  93   1         WDTCN     = 0xAD;
  94   1              EA= 1;   
  95   1              
  96   1              LED=0;
  97   1      
  98   1              Port_IO_Init();
  99   1              Oscillator_Init();   
 100   1              Interrupts_Init(); 
 101   1              Timer_Init();
 102   1              UART0_Init();
 103   1         UART1_Init();
 104   1              PCA_Init();
 105   1         ADC_Init();
 106   1      
 107   1              LirTarget = 0x03ff;
 108   1      //      Fdelta = 0;
 109   1              flNewGPS = 0;
 110   1              u0timer=0;
 111   1              while(1)
 112   1              {
 113   2                      for(iter=0; iter<16; iter++)
 114   2                      {
 115   3                              _nop_();
 116   3                      }
 117   2                      
C51 COMPILER V9.00   SERVO5                                                                10/03/2012 13:38:05 PAGE 3   

 118   2      //ADC
 119   2                      if(DavlFlag==1)
 120   2                      {
 121   3                              EA = 0; 
 122   3                              Pressure =  Result * 2430 / 4095;
 123   3                              EA = 1; 
 124   3                              DavlFlag = 0;
 125   3                      }
 126   2                      EIP2      |= 0x02;
 127   2      //Veter
 128   2                      if(VeterFlag==1)
 129   2                      {
 130   3                              Vspeed = (float)FREQT0/((float)TV*0.75);
 131   3                              Angle = 360. - (360.*(float)TV/(float)TA);
 132   3                              VeterFlag = 0;
 133   3                      }
 134   2      //GPS---------------------------------------------------------------------------
 135   2      
 136   2                      if(flNewGPS==1) 
 137   2                      {
 138   3                              flNewGPS = 0;
 139   3                      //rashifrovka GPS
 140   3                              if (r < w+mar*NS) 
 141   3                              {
 142   4                                      if(mess[r] == '$')
 143   4                                      {
 144   5                      nLetter = 0;
 145   5                                      }
 146   4                      else if ((nLetter == 0) && (mess[r] == 'G'))
 147   4                      nLetter++;
 148   4                      else if ((nLetter == 1) && (mess[r] == 'P'))
 149   4                      nLetter++;
 150   4                      else if ((nLetter == 2) && (mess[r] == 'R'))
 151   4                      nLetter++;
 152   4                       else if ((nLetter == 3) && (mess[r] == 'M'))
 153   4                       nLetter++;
 154   4                 else if ((nLetter == 4) && (mess[r] == 'C'))
 155   4                      {
 156   5                      nLetter++;
 157   5                                              i_comma = 0;
 158   5                                              ValidGPS = 0;
 159   5                 } 
 160   4                              else if(mess[r] == ',')
 161   4                                      {
 162   5                                              i_comma++;
 163   5                                              i = 0;
 164   5                                              flPoint = 0;
 165   5                                      }
 166   4                              else if(i_comma == 2)
 167   4                                      {
 168   5                                              if(mess[r] == 'A') 
 169   5                                                      ValidGPS = 1;
 170   5                                              else
 171   5                                              {
 172   6                                                      ValidGPS = 0;
 173   6              //                                      flNoKoord = 1;
 174   6              //                                      liTimer_tick_GPS = liTimer_tick;
 175   6                                              }
 176   5                                      }
 177   4                      else if (ValidGPS)
 178   4                                      {
 179   5                                              if (i_comma == 3)                                       //Latitude
C51 COMPILER V9.00   SERVO5                                                                10/03/2012 13:38:05 PAGE 4   

 180   5                                              {
 181   6                                                      if(mess[r] == '.')
 182   6                                                      {
 183   7                                                              flPoint = 1;
 184   7                                                              i = 0;
 185   7                                                      }
 186   6                                                      else if (flPoint == 0)                                          //celaya chast
 187   6                                                      {
 188   7                                                              tmpGPS[i++] = mess[r];
 189   7                                                              if(i == 2)
 190   7                                                              {
 191   8                                              tmpGPS[i] = 0;
 192   8                                                                      temp_koord = atoi(tmpGPS);
 193   8                                              temp_koord = 60UL*10000*temp_koord;
 194   8                                                              }       
 195   7                                                              else if(i == 4)
 196   7                                                              {
 197   8                                                                      tmpGPS[0] = tmpGPS[1] = '0';
 198   8                                              tmpGPS[i] = 0;
 199   8                                              temp_koord = temp_koord+10000UL*atoi(tmpGPS);
 200   8                                                              }       
 201   7                                                      }
 202   6                                                      else                                                                                            //drobnaya chast
 203   6                                                      {
 204   7                                                              tmpGPS[i++] = mess[r];
 205   7                                      tmpGPS[i] = 0;
 206   7                                                      }
 207   6                                              }
 208   5                                              else if (i_comma == 4)
 209   5                                              {
 210   6                                      temp_koord = temp_koord+atoi(tmpGPS);
 211   6      //-----------
 212   6      //lLatFly = 55UL*60*10000+50UL*10000+8680;
 213   6      //--------
 214   6                                                      if (mess[r] == 'S')                                             //znak Latitude
 215   6                                                              LatFly = 54000000UL-temp_koord;         //90UL*60*10000-koord;
 216   6                                                      else              
 217   6                                                              LatFly = 54000000UL+temp_koord;         //90UL*60*10000+koord;
 218   6                                              }
 219   5                                              else if (i_comma == 5)                          //Longitude
 220   5                                              {
 221   6                                                      if(mess[r] == '.')
 222   6                                                      {
 223   7                                                              flPoint = 1;
 224   7                                                              i = 0;
 225   7                                                      }
 226   6                                                      else if (flPoint == 0)                                          //celaya chast
 227   6                                                      {
 228   7                                                              tmpGPS[i++] = mess[r];
 229   7                                                              if(i == 3)
 230   7                                                              {
 231   8                                              tmpGPS[i] = 0;
 232   8                                              temp_koord = atoi(tmpGPS);
 233   8                                              temp_koord = 60UL*10000*temp_koord;
 234   8                                                              }       
 235   7                                                              else if(i == 5)
 236   7                                                              {
 237   8                                                                      tmpGPS[0] = tmpGPS[1] = tmpGPS[2] = '0';
 238   8                                              tmpGPS[i] = 0;
 239   8                                              temp_koord = temp_koord+10000UL*atoi(tmpGPS);
 240   8                                                              }       
 241   7                                                      }
C51 COMPILER V9.00   SERVO5                                                                10/03/2012 13:38:05 PAGE 5   

 242   6                                                      else                                                                                            //drobnaya chast
 243   6                                                      {
 244   7                                                              tmpGPS[i++] = mess[r];
 245   7                                      tmpGPS[i] = 0;
 246   7                                                      }
 247   6                                              }
 248   5                                              else if (i_comma == 6)
 249   5                                              {
 250   6                                      temp_koord = temp_koord+atoi(tmpGPS);
 251   6      //----------------
 252   6      //lLonFly = 49UL*60*10000+6UL*10000+3760;
 253   6      //----------------
 254   6                                                      if (mess[r] == 'W')                                             //znak Longitude
 255   6                                                              LonFly = 108000000UL-temp_koord;                //180UL*60*10000-koord;
 256   6                                                      else       
 257   6                                                              LonFly = temp_koord+108000000UL;                //180UL*60*10000;
 258   6                                              }
 259   5                                              else if (i_comma == 7)                                                  //skorost v uzlah
 260   5                                              {
 261   6                                                      if(mess[r] == '.')
 262   6                                                      {
 263   7                                                              flPoint = 1;
 264   7                                      Vz = 1.852*atoi(tmpGPS)/3.6;            //preobrazovat iz uzlov v m/s
 265   7      //---------
 266   7      //Vz = 20;
 267   7      //-----------
 268   7                                                      }
 269   6                                                      else if(flPoint == 0)
 270   6                                                      {
 271   7                                                              tmpGPS[i++] = mess[r];
 272   7                                      tmpGPS[i] = 0;
 273   7                                                      }
 274   6                      }
 275   5                                              else if (i_comma == 8)                                                  //kurs v gradusah
 276   5                                              {
 277   6                                                      if(mess[r] == '.')
 278   6                                                      {
 279   7                                                              flPoint = 1;
 280   7                                      koors = atoi(tmpGPS);
 281   7                              if (koors < 0)
 282   7                              koors = 360+koors;
 283   7                                                              flNoKoord = 0;
 284   7                                                              flNewGPS = 1;
 285   7                                                              liTimer_tick_GPS = liTimer_tick;        
 286   7              //                          OutModem20();
 287   7      //-----------                                              
 288   7      //koors = 30;
 289   7      //-----------
 290   7                                                      }
 291   6                                                      else if(flPoint == 0)
 292   6                                                      {
 293   7                                                              tmpGPS[i++] = mess[r];
 294   7                                      tmpGPS[i] = 0;
 295   7                                                      }
 296   6                          }
 297   5                                      }
 298   4                                      r++;
 299   4                              if(r >= NS)
 300   4                                      {
 301   5                              r = 0;
 302   5                                              mar = 0;        
 303   5                                      }      
C51 COMPILER V9.00   SERVO5                                                                10/03/2012 13:38:05 PAGE 6   

 304   4                              }
 305   3                      }
 306   2      
 307   2      
 308   2      //COM
 309   2                      if(u0timer>0xf0)
 310   2                      {
 311   3                              u0timer = 0;
 312   3                              //      ES0=1;
 313   3                              if(wBFM > 4)
 314   3                              {
 315   4                                      if(BuferFromModem [wBFM-1]==0x41)
 316   4                                      {
 317   5                                              if(BuferFromModem [wBFM-4]==0x40)
 318   5                                              {
 319   6                                                      Aint.b[0] = BuferFromModem[wBFM-3];
 320   6                                                      Aint.b[1] = BuferFromModem[wBFM-2];
 321   6                                                      if(Aint.i<=0x0fff)
 322   6                                                      {
 323   7                                                              LirTarget = Aint.i;
 324   7                                                      }
 325   6                                              }       
 326   5                                      }
 327   4                                      wBFM = 0;
 328   4                              }
 329   3                              //      TI0 = 1; //Read redy UART0
 330   3                              //Write to UART0--------------------------------------
 331   3                              Aint.i = LirData;
 332   3                              BufferInModem[0] = 0x40+1;
 333   3                              BufferInModem[1] = Aint.b[0];           
 334   3                              BufferInModem[2] = Aint.b[1];
 335   3                              Bfloat.f= Vspeed; 
 336   3                              BufferInModem[3] = Bfloat.b[0];
 337   3                              BufferInModem[4] = Bfloat.b[1];
 338   3                              BufferInModem[5] = Bfloat.b[2];
 339   3                              BufferInModem[6] = Bfloat.b[3];
 340   3                              Bfloat.f= Angle;
 341   3                              BufferInModem[7] = Bfloat.b[0];
 342   3                              BufferInModem[8] = Bfloat.b[1];
 343   3                              BufferInModem[9] = Bfloat.b[2];
 344   3                              BufferInModem[10] = Bfloat.b[3];
 345   3                              BufferInModem[11] = 0x40;
 346   3                         BufferInModem[12] = 0;
 347   3                      for (i = 0; i < 12; i++ )
 348   3                              BufferInModem[12] = BufferInModem[12] ^ BufferInModem[i];
 349   3                      BufferInModem[12] = 0x80 | BufferInModem[12];
 350   3      
 351   3                              flTransmiter = 1;
 352   3              
 353   3                              r0 = 0;
 354   3                              rk = 13;
 355   3                              SFRPAGE = 0x00;
 356   3                              while (flTransmiter)
 357   3                              {
 358   4                                      if(r0 < rk)
 359   4                                      {
 360   5                                              flTransmiter = 1;
 361   5                                              SBUF0 = BufferInModem[r0++];
 362   5                                      }
 363   4                                      else
 364   4                                      {
 365   5                                              flTransmiter = 0;
C51 COMPILER V9.00   SERVO5                                                                10/03/2012 13:38:05 PAGE 7   

 366   5                                      }
 367   4                              }
 368   3                              //ES0=0;
 369   3                      }
 370   2              }
 371   1      }
 372          //------------------------------------------------------------------------------------
 373          void INT0 (void) interrupt 0 //skorost vetra
 374          {
 375   1              EX0 =   0;
 376   1              VeterFlag = 1;
 377   1              TV = RTC - RTCV;
 378   1              RTCV = RTC;
 379   1              return;
 380   1      }
 381          
 382          //------------------------------------------------------------------------------------
 383          void TIMER_ISR0 (void) interrupt 1
 384          {
 385   1              float tmp;
 386   1              unsigned char shim;
 387   1      
 388   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 389   1              SFRPAGE = TIMER01_PAGE;
 390   1              RTC++;
 391   1              u0timer++;
 392   1      
 393   1              EA = 0; //опрос ЛИР
 394   1              LirData = 0;
 395   1                              
 396   1              LIR_SCK = 1;    //---init
 397   1              LIR_SCK = 0;
 398   1                              
 399   1              LIR_SCK = 1;    //---D n-1
 400   1              LIR_SCK = 0;
 401   1                              
 402   1              LIR_SCK = 1;    //---D n-1
 403   1              LIR_SCK = 0;
 404   1              if(LIR_DATA != 0) 
 405   1                      LirData = LirData | (0x01 << (11));
 406   1      
 407   1              LIR_SCK = 1; 
 408   1              LIR_SCK = 0;
 409   1              if(LIR_DATA != 0) 
 410   1                      LirData = LirData | (0x01 << (10));
 411   1      
 412   1              LIR_SCK = 1; 
 413   1              LIR_SCK = 0;
 414   1              if(LIR_DATA != 0) 
 415   1                      LirData = LirData | (0x01 << (9));
 416   1      
 417   1              LIR_SCK = 1; 
 418   1              LIR_SCK = 0;
 419   1              if(LIR_DATA != 0) 
 420   1                      LirData = LirData | (0x1 << (8));
 421   1      
 422   1              LIR_SCK = 1; 
 423   1              LIR_SCK = 0;
 424   1              if(LIR_DATA!=0) 
 425   1                      LirData = LirData | (0x1 << (7));
 426   1      
 427   1              LIR_SCK = 1; 
C51 COMPILER V9.00   SERVO5                                                                10/03/2012 13:38:05 PAGE 8   

 428   1              LIR_SCK = 0;
 429   1              if(LIR_DATA!=0) 
 430   1                      LirData = LirData | (0x1 << (6));
 431   1      
 432   1              LIR_SCK = 1; 
 433   1              LIR_SCK = 0;
 434   1              if(LIR_DATA!=0) 
 435   1                      LirData = LirData | (0x1 << (5));
 436   1      
 437   1              LIR_SCK = 1; 
 438   1              LIR_SCK = 0;
 439   1              if(LIR_DATA!=0) 
 440   1                      LirData = LirData | (0x1 << (4));
 441   1      
 442   1              LIR_SCK = 1; 
 443   1              LIR_SCK = 0;
 444   1              if(LIR_DATA!=0) 
 445   1                      LirData = LirData | (0x1 << (3));
 446   1      
 447   1              LIR_SCK = 1; 
 448   1              LIR_SCK = 0;
 449   1              if(LIR_DATA!=0) 
 450   1                      LirData = LirData | (0x1 << (2));
 451   1      
 452   1              LIR_SCK = 1; 
 453   1              LIR_SCK = 0;
 454   1              if(LIR_DATA!=0) 
 455   1                      LirData = LirData | (0x1 << (1));
 456   1      
 457   1              LIR_SCK = 1; 
 458   1              LIR_SCK = 0;
 459   1              if(LIR_DATA!=0) 
 460   1                      LirData = LirData | (0x1 << (0));
 461   1      
 462   1              LIR_SCK = 1; 
 463   1              EA = 1;
 464   1              
 465   1      #define K 30.8
 466   1              tmp = 360.0/4095.0*LirData;
 467   1              if ((A > 270) && (tmp < 90))
 468   1              {
 469   2                      A = A+(tmp+360-A)/PCACLK*K;
 470   2                      if (A > 360)
 471   2                              A = A-360;
 472   2              }
 473   1              else if ((tmp > 270) && (A < 90))
 474   1              {
 475   2                      A = A+(tmp-A-360)/PCACLK*K;
 476   2                      if (A < 0)
 477   2                              A = A+360;
 478   2              }
 479   1              else
 480   1                      A = A+(tmp-A)/PCACLK*K;
 481   1      
 482   1              if ((A_pr > 270) && (A < 90))
 483   1                      V = V+((A+360-A_pr)*PCACLK-V)/PCACLK*K;
 484   1              else if ((A > 270) && (A_pr < 90))
 485   1                      V = V+((A-A_pr-360)*PCACLK-V)/PCACLK*K;
 486   1              else
 487   1                      V = V+((A-A_pr)*PCACLK-V)/PCACLK*K;
 488   1              if (V > 200) 
 489   1                      V = 200;
C51 COMPILER V9.00   SERVO5                                                                10/03/2012 13:38:05 PAGE 9   

 490   1              else if (V < -200) 
 491   1                      V = -200;
 492   1              A_pr = A;
 493   1      
 494   1      
 495   1              //управление антеной--------------------------------------------------
 496   1              A_zad = A_zad - 0.01;
 497   1              V_zad = (A_zad-A);
 498   1              while (V_zad > 180)
 499   1            V_zad -= 360;
 500   1              while (V_zad < -180)
 501   1            V_zad += 360;
 502   1      
 503   1              V_zad = V_zad/50*200;   
 504   1              if(V_zad > 200) 
 505   1                      V_zad = 200;
 506   1              else if(V_zad < -200)   
 507   1                      V_zad = -200;
 508   1      
 509   1              tau = (V_zad-V)/200*0.000025;
 510   1              if (tau > 0.000025)
 511   1                      tau = 0.000025;
 512   1              else if (tau < -0.000025)
 513   1                      tau = -0.000025;
 514   1      
 515   1              shim = 0xff-0x3f*fabs(tau)/0.000025;    
 516   1              if (tau > 0)
 517   1              {
 518   2                      PCA0CN    = 0x40;
 519   2                 PCA0MD    = 0x01;
 520   2              PCA0CPM0  = 0x43;
 521   2                 PCA0CPM1  = 0x43;
 522   2                      PCA0CPH0  = 0xFF;
 523   2              PCA0CPH1  = shim;
 524   2              }
 525   1              else
 526   1              {
 527   2                      PCA0CN    = 0x40;
 528   2              PCA0MD    = 0x01;
 529   2                 PCA0CPM0  = 0x43;
 530   2              PCA0CPM1  = 0x43;
 531   2                 PCA0CPH0  = shim;
 532   2              PCA0CPH1  = 0xFF;
 533   2              }
 534   1              if(WSpeed!=0)
 535   1                      EX0=1;
 536   1      
 537   1              if(WAngle!=0)
 538   1                      EX1=1;
 539   1      
 540   1              SFRPAGE = SFRPAGE_SAVE;
 541   1              return;
 542   1      }
 543          
 544          
 545          
 546          //------------------------------------------------------------------------------------
 547          void INT1 (void) interrupt 2 //napravl vetra
 548          {
 549   1              EX1=0;
 550   1              TA = RTC - RTCA;
 551   1              RTCA = RTC;
C51 COMPILER V9.00   SERVO5                                                                10/03/2012 13:38:05 PAGE 10  

 552   1              return;
 553   1      }
 554          
 555          //------------------------------------------------------------------------------------
 556          void COM_UART0_isr(void) interrupt 4
 557          {
 558   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 559   1              SFRPAGE = UART0_PAGE;
 560   1              
 561   1              if (RI0)
 562   1              {
 563   2                      BuferFromModem [wBFM++] = SBUF0;  // read character
 564   2                      if(wBFM >= NBFM)
 565   2                      {
 566   3                      wBFM = 0;
 567   3                              marBFM = 1;
 568   3                      }
 569   2                      RI0 = 0;
 570   2              }
 571   1              if (TI0)
 572   1              {
 573   2                      if(flTransmiter == 0)
 574   2                              TI0 = 0;        
 575   2              }
 576   1      
 577   1              SFRPAGE = UART1_PAGE;
 578   1              if (RI1)
 579   1              {
 580   2                      flNewGPS = 1;
 581   2                      mess [w++] = SBUF1;  // read character
 582   2                      if(w >= NS)
 583   2                      {
 584   3                      w = 0;
 585   3                              mar = 1;
 586   3                      }
 587   2                      RI1 = 0;
 588   2              }
 589   1              SFRPAGE = SFRPAGE_SAVE;
 590   1              return;
 591   1      }
 592          
 593          //-------------------------------------------------------------------
 594          void PCA_isr (void)interrupt 9
 595          {
 596   1              float tmp;
 597   1              unsigned char shim;
 598   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 599   1              SFRPAGE = PCA0_PAGE;
 600   1              CF = 0;
 601   1              SFRPAGE = SFRPAGE_SAVE;
 602   1              return;
 603   1      }
*** WARNING C280 IN LINE 596 OF SERVO5.C: 'tmp': unreferenced local variable
*** WARNING C280 IN LINE 597 OF SERVO5.C: 'shim': unreferenced local variable
 604          //-------------------------------------------------------------------
 605          
 606          void ADC0_ISR (void) interrupt 15
 607          {
 608   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 609   1              SFRPAGE = ADC0_PAGE;
 610   1              AD0INT = 0;                         // Clear ADC conversion complete
 611   1                                             // indicator
C51 COMPILER V9.00   SERVO5                                                                10/03/2012 13:38:05 PAGE 11  

 612   1         accumulator += ADC0;                // Read ADC value and add to running
 613   1                                             // total
 614   1         int_dec--;                          // Update decimation counter
 615   1      
 616   1         if (int_dec == 0)                   // If zero, then post result
 617   1         {
 618   2                      int_dec = 256;               // Reset counter
 619   2            Result = accumulator >> 8;
 620   2            accumulator = 0L;                // Reset accumulator
 621   2                      DavlFlag = 1;
 622   2                      EIP2  &= ~0x02;
 623   2         }
 624   1              SFRPAGE = SFRPAGE_SAVE;
 625   1              return;
 626   1      }
 627          //-------------------------------------------------------------------
 628          void GPS_UART1_isr(void) interrupt 20
 629          {
 630   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 631   1              SFRPAGE = UART1_PAGE;
 632   1              if (RI1)
 633   1              {
 634   2                      flNewGPS = 1;
 635   2                      mess [w++] = SBUF1;  // read character
 636   2                      if(w >= NS)
 637   2                      {
 638   3                      w = 0;
 639   3                              mar = 1;
 640   3                      }
 641   2                      RI1 = 0;
 642   2              }
 643   1              if (TI1)
 644   1              {
 645   2                              
 646   2              }
 647   1              SFRPAGE = SFRPAGE_SAVE;
 648   1              return;
 649   1      }
 650          
 651          
 652          //#endif
 653          
 654          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4517    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    283      23
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
