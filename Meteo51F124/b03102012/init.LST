C51 COMPILER V9.00   INIT                                                                  10/02/2012 13:36:11 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE INIT
OBJECT MODULE PLACED IN init.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe init.c DB OE BR

line level    source

   1          #include "c8051f120.h"
   2          #include "init.h"
   3          
   4          //-----------------------------------------------------------------------------
   5          // 16-bit SFR Definitions for 'F12x
   6          //-----------------------------------------------------------------------------
   7          
   8          sfr16 ADC0     = 0xbe;                 // ADC0 data
   9          sfr16 RCAP2    = 0xca;                 // Timer2 capture/reload
  10          sfr16 RCAP3    = 0xca;                 // Timer3 capture/reload
  11          sfr16 TMR2     = 0xcc;                 // Timer2
  12          sfr16 TMR3     = 0xcc;                 // Timer3
  13          
  14          #define SYSCLK       (24856840L * 2 / 1)          
  15          #define SAMPLE_RATE  50000             // Sample frequency in Hz
  16          
  17          #define SAR_CLK      2500000           // Desired SAR clock speed
  18          
  19          
  20          #define BAUDRATEU0     115200            // Baud rate of UART0 in bps
  21          #define BAUDRATEU1              9600
  22          
  23          
  24          void Timer_Init()
  25          {
  26   1      //---------------------------------------
  27   1          SFRPAGE   = TIMER01_PAGE;
  28   1          TCON      = 0x50;
  29   1          TMOD      = 0x22; //TMOD      = 0x11;
  30   1          TL0       = 0x4B;
  31   1          TH0       = 0xA0;
  32   1               
  33   1               CKCON      = 0x08;
  34   1         // IP        |= 0x02;        
  35   1      //---------------------------------------       
  36   1         SFRPAGE = TMR3_PAGE;
  37   1      
  38   1         TMR3CN = 0x04;                    
  39   1         TMR3CF = 0x08;                    
  40   1      
  41   1         RCAP3   = -SYSCLK/SAMPLE_RATE;                
  42   1         TMR3    = RCAP3;                    
  43   1         EIE2   &= ~0x01;                    
  44   1         TR3     = 1;    
  45   1      //   EIP2      |= 0x01;                    
  46   1      }
  47          
  48          void UART0_Init (void) //COM Ì‡ Timer2
  49          {
  50   1          char SFRPAGE_SAVE;
  51   1      
  52   1          SFRPAGE_SAVE = SFRPAGE;
  53   1      
  54   1               SFRPAGE   = TMR2_PAGE;
  55   1      
C51 COMPILER V9.00   INIT                                                                  10/02/2012 13:36:11 PAGE 2   

  56   1               TMR2CF = 0x08; // Timer 2 Configuration
  57   1          RCAP2 = - ((long) SYSCLK/BAUDRATEU0/16);
  58   1      
  59   1          TMR2L = 0x00;   // Timer 2 Low Byte
  60   1          TMR2H = 0x00;   // Timer 2 High Byte
  61   1          TMR2CN = 0x04;  // Timer 2 CONTROL
  62   1               TR2 = 1;
  63   1               SFRPAGE = UART0_PAGE;
  64   1      
  65   1               SCON0 = 0x50;
  66   1               SSTA0 = 0x05;    
  67   1      
  68   1               ES0 = 1;
  69   1              // IP |= 0x10;
  70   1          SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
  71   1      }
  72          
  73          void UART1_Init (void) //GPS Ì‡ Timer1
  74          {
  75   1         char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
  76   1      
  77   1         SFRPAGE = UART1_PAGE;
  78   1         SCON1   = 0x10;                     // SCON1: mode 0, 8-bit UART, enable RX
  79   1      
  80   1         SFRPAGE = TIMER01_PAGE;
  81   1         TMOD   &= ~0xF0;
  82   1         TMOD   |=  0x20;                    // TMOD: timer 1, mode 2, 8-bit reload
  83   1      
  84   1      
  85   1         if (SYSCLK/BAUDRATEU1/2/256 < 1) {
  86   2            TH1 = -(SYSCLK/BAUDRATEU1/2);
  87   2            CKCON |= 0x10;                   // T1M = 1; SCA1:0 = xx
  88   2         } else if (SYSCLK/BAUDRATEU1/2/256 < 4) {
  89   2            TH1 = -(SYSCLK/BAUDRATEU1/2/4);
  90   2            CKCON &= ~0x13;                  // Clear all T1 related bits
  91   2            CKCON |=  0x01;                  // T1M = 0; SCA1:0 = 01
  92   2         } else if (SYSCLK/BAUDRATEU1/2/256 < 12) {
  93   2            TH1 = -(SYSCLK/BAUDRATEU1/2/12);
  94   2            CKCON &= ~0x13;                  // T1M = 0; SCA1:0 = 00
  95   2         } else {
  96   2            TH1 = -(SYSCLK/BAUDRATEU1/2/48);
  97   2            CKCON &= ~0x13;                  // Clear all T1 related bits
  98   2            CKCON |=  0x02;                  // T1M = 0; SCA1:0 = 10
  99   2         }
 100   1      
 101   1         TL1 = TH1;                          // init Timer1
 102   1         TR1 = 1;                            // START Timer1
 103   1         
 104   1         EIE2      = 0x40;                   // Enable UART1 interrupts
 105   1      
 106   1         SFRPAGE = UART1_PAGE;
 107   1        // EIP2    |= 0x40;                     // Make UART high priority
 108   1      
 109   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 110   1      
 111   1      }
 112          
 113          void PCA_Init()
 114          {
 115   1          SFRPAGE   = PCA0_PAGE;
 116   1          PCA0CN    = 0x40;
 117   1          PCA0MD    = 0x01; //         ECF=1;
C51 COMPILER V9.00   INIT                                                                  10/02/2012 13:36:11 PAGE 3   

 118   1          PCA0CPM0  = 0x43;
 119   1               PCA0CPH0  = 0xFF;
 120   1               PCA0CPL0  = 0xFF;
 121   1               PCA0CPM1  = 0x43;
 122   1               PCA0CPH1  = 0xFF;
 123   1               PCA0CPL1  = 0xFF;
 124   1               CF = 0;
 125   1          EIP1      |= 0x08;
 126   1      }
 127          
 128          void ADC_Init()
 129          {
 130   1         char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 131   1      
 132   1         SFRPAGE = ADC0_PAGE;
 133   1      
 134   1         ADC0CN = 0x04;                      // ADC0 disabled; normal tracking
 135   1                                             // mode; ADC0 conversions are initiated
 136   1                                             // on overflow of Timer3; ADC0 data is
 137   1                                             // right-justified
 138   1      
 139   1         REF0CN = 0x07;                      // Enable temp sensor, on-chip VREF,
 140   1                                             // and VREF output buffer
 141   1      
 142   1         AMX0CF = 0x00;                      // AIN inputs are single-ended (default)
 143   1      
 144   1         AMX0SL = 0x01;                      // Select AIN0.1 pin as ADC mux input
 145   1      
 146   1         ADC0CF = (SYSCLK/SAR_CLK) << 3;     // ADC conversion clock = 2.5MHz
 147   1         ADC0CF |= 0x00;                     // PGA gain = 1 (default)
 148   1      
 149   1         EIE2 |= 0x02;                       // enable ADC interrupts
 150   1      
 151   1         SFRPAGE   = ADC0_PAGE;
 152   1         ADC0CN    = 0x84;
 153   1              
 154   1         EIP2      |= 0x02;
 155   1      
 156   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 157   1      }
 158          //------------------------------------------------------------------------------------------
 159          void Port_IO_Init(void)
 160          {
 161   1          // P0.0  -  TX0 (UART0), Open-Drain, Digital
 162   1          // P0.1  -  RX0 (UART0), Open-Drain, Digital
 163   1          // P0.2  -  SDA (SMBus), Open-Drain, Digital
 164   1          // P0.3  -  SCL (SMBus), Open-Drain, Digital
 165   1          // P0.4  -  TX1 (UART1), Open-Drain, Digital
 166   1          // P0.5  -  RX1 (UART1), Open-Drain, Digital
 167   1          // P0.6  -  CEX0 (PCA),  Push-Pull,  Digital ÿ»Ã
 168   1          // P0.7  -  CEX1 (PCA),  Push-Pull,  Digital ÿ»Ã
 169   1      
 170   1          // P1.0  -  T0 (Timer0), Push-Pull,  Digital
 171   1          // P1.1  -  wind Speed INT0 (Tmr0), Push-Pull,  Digital
 172   1          // P1.2  -  T1 (Timer1), Push-Pull,  Digital
 173   1          // P1.3  -  wind Angle INT1 (Tmr1), Push-Pull,  Digital
 174   1          // P1.4  -  T2 (Timer2), Push-Pull,  Digital
 175   1               // P2.0 À»– CLOCK
 176   1               // P2.1 À»– DATA
 177   1      
 178   1          SFRPAGE   = CONFIG_PAGE;
 179   1          P0MDOUT   = 0xff; //0xf3; 
C51 COMPILER V9.00   INIT                                                                  10/02/2012 13:36:11 PAGE 4   

 180   1          P1MDOUT   = 0xFF;
 181   1               P2MDOUT   = 0xFF;
 182   1          XBR0      = 0x15;
 183   1          XBR1      = 0x3e; //0xbE; //(^7 ‚˚‚Ó‰ËÏ Ì‡ sysclk Ì‡ ÌÓ„Û)
 184   1          XBR2      = 0x44; 
 185   1      }
 186           
 187          void Oscillator_Init(void)
 188          {
 189   1      //      int loop;                           
 190   1         char SFRPAGE_SAVE = SFRPAGE;        
 191   1         SFRPAGE = CONFIG_PAGE;             
 192   1      
 193   1         OSCICN = 0x83; 
 194   1      /*                           
 195   1         CLKSEL = 0x00;                      
 196   1      
 197   1         SFRPAGE = CONFIG_PAGE;
 198   1         PLL0CN  = 0x00;                   
 199   1         SFRPAGE = LEGACY_PAGE;
 200   1         FLSCL |=  0x30;
 201   1         if (SYSCLK <= 25000000) {           
 202   1         // Set FLASH read timing for <=25MHz
 203   1            FLSCL &= ~0x30;
 204   1         } else if (SYSCLK <= 50000000) {    
 205   1         // Set FLASH read timing for <=50MHz
 206   1            FLSCL &= ~0x20;
 207   1         } else if (SYSCLK <= 75000000) {    
 208   1         // Set FLASH read timing for <=75MHz
 209   1            FLSCL &= ~0x10;
 210   1         } else {                            // set FLASH read timing for <=100MHz
 211   1            FLSCL &= ~0x00;
 212   1         }
 213   1         SFRPAGE = CONFIG_PAGE;
 214   1         PLL0CN |= 0x01;                     // Enable Power to PLL
 215   1         PLL0DIV = 0x01;                     // Set Pre-divide value to N (N = 1)
 216   1              if (SYSCLK <= 25000000) { 
 217   1                               
 218   1         } else if (SYSCLK <= 50000000) {    
 219   1                      PLL0FLT = 0x21;
 220   1         } else if (SYSCLK <= 75000000) {    
 221   1                      PLL0FLT = 0x01;
 222   1         } else {                            // set FLASH read timing for <=100MHz
 223   1            PLL0FLT = 0x01;
 224   1         }
 225   1              PLL0MUL = 0x02;
 226   1         for (loop=0; loop < 256; loop++);   
 227   1         PLL0CN  |= 0x02;                    
 228   1         while(!(PLL0CN & 0x10));            
 229   1         CLKSEL  = 0x02; */           
 230   1                     
 231   1         SFRPAGE = SFRPAGE_SAVE;             
 232   1      }
 233          
 234          void Interrupts_Init(void)
 235          {
 236   1          IE        = 0xBF;
 237   1          EIE1      = 0x08;
 238   1          EIE2      = 0x42; 
 239   1      }
 240          
 241          
C51 COMPILER V9.00   INIT                                                                  10/02/2012 13:36:11 PAGE 5   

 242          //------------------------------------------------------------------------------------------
 243          
 244          //#endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    227    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
