C51 COMPILER V9.00   INIT6                                                                 11/27/2012 08:28:53 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE INIT6
OBJECT MODULE PLACED IN init6.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe init6.c DB OE BR

line level    source

   1          #include "c8051f120.h"
   2          #include "init.h"
   3          
   4          //-----------------------------------------------------------------------------
   5          // 16-bit SFR Definitions for 'F12x
   6          //-----------------------------------------------------------------------------
   7          
   8          sfr16 ADC0     = 0xbe;                 // ADC0 data
   9          sfr16 RCAP2    = 0xca;                 // Timer2 capture/reload
  10          sfr16 RCAP3    = 0xca;                 // Timer3 capture/reload
  11          sfr16 TMR2     = 0xcc;                 // Timer2
  12          sfr16 TMR3     = 0xcc;                 // Timer3
  13          
  14          #define SYSCLK      24883200 //(24856840L * 2 / 1)          
  15          #define SAMPLE_RATE  50000             // Sample frequency in Hz
  16          
  17          #define SAR_CLK      2500000           // Desired SAR clock speed
  18          
  19          
  20          #define BAUDRATEU0     115200            // Baud rate of UART0 in bps
  21          #define BAUDRATEU1              4800
  22          
  23          
  24          void Timer_Init()
  25          {
  26   1      //---------------------------------------
  27   1          SFRPAGE   = TIMER01_PAGE;
  28   1          TCON      = 0x50;
  29   1          TMOD      = 0x22; //TMOD      = 0x11;
  30   1      // TH0 = A0; TL0 = 4b; 1000Hz
  31   1      // TH0 = ED; TL0 = A8; 200Hz
  32   1          TH0       = 0xA0;
  33   1               TL0       = 0x4B;
  34   1          
  35   1               
  36   1               CKCON      = 0x08;
  37   1         // IP        |= 0x02;        
  38   1      //---------------------------------------       
  39   1         SFRPAGE = TMR3_PAGE;
  40   1      
  41   1         TMR3CN = 0x04;                    
  42   1         TMR3CF = 0x08;                    
  43   1      
  44   1         RCAP3   = -SYSCLK/SAMPLE_RATE;                
  45   1         TMR3    = RCAP3;                    
  46   1         EIE2   &= ~0x01;                    
  47   1         TR3     = 1;    
  48   1      //   EIP2      |= 0x01;                    
  49   1      }
  50          
  51          void UART0_Init (void) //COM Ì‡ Timer2
  52          {
  53   1          char SFRPAGE_SAVE;
  54   1      
  55   1          SFRPAGE_SAVE = SFRPAGE;
C51 COMPILER V9.00   INIT6                                                                 11/27/2012 08:28:53 PAGE 2   

  56   1      
  57   1               SFRPAGE   = TMR2_PAGE;
  58   1      
  59   1               TMR2CF = 0x08; // Timer 2 Configuration
  60   1          RCAP2 = - ((long) SYSCLK/BAUDRATEU0/16);
  61   1      
  62   1          TMR2L = 0x00;   // Timer 2 Low Byte
  63   1          TMR2H = 0x00;   // Timer 2 High Byte
  64   1          TMR2CN = 0x04;  // Timer 2 CONTROL
  65   1               TR2 = 1;
  66   1               SFRPAGE = UART0_PAGE;
  67   1      
  68   1               SCON0 = 0x50;
  69   1               SSTA0 = 0x05;    
  70   1      
  71   1               ES0 = 1;
  72   1               IP |= 0x10;
  73   1          SFRPAGE = SFRPAGE_SAVE;             // Restore SFRPAGE
  74   1      }
  75          
  76          void UART1_Init (void) //GPS Ì‡ Timer1
  77          {
  78   1         char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
  79   1      
  80   1         SFRPAGE = UART1_PAGE;
  81   1         SCON1   = 0x10;                     // SCON1: mode 0, 8-bit UART, enable RX
  82   1      
  83   1         SFRPAGE = TIMER01_PAGE;
  84   1         TMOD   &= ~0xF0;
  85   1         TMOD   |=  0x20;                    // TMOD: timer 1, mode 2, 8-bit reload
  86   1      
  87   1      
  88   1         if (SYSCLK/BAUDRATEU1/2/256 < 1) {
  89   2            TH1 = -(SYSCLK/BAUDRATEU1/2);
  90   2            CKCON |= 0x10;                   // T1M = 1; SCA1:0 = xx
  91   2         } else if (SYSCLK/BAUDRATEU1/2/256 < 4) {
  92   2            TH1 = -(SYSCLK/BAUDRATEU1/2/4);
  93   2            CKCON &= ~0x13;                  // Clear all T1 related bits
  94   2            CKCON |=  0x01;                  // T1M = 0; SCA1:0 = 01
  95   2         } else if (SYSCLK/BAUDRATEU1/2/256 < 12) {
  96   2            TH1 = -(SYSCLK/BAUDRATEU1/2/12);
  97   2            CKCON &= ~0x13;                  // T1M = 0; SCA1:0 = 00
  98   2         } else {
  99   2            TH1 = -(SYSCLK/BAUDRATEU1/2/48);
 100   2            CKCON &= ~0x13;                  // Clear all T1 related bits
 101   2            CKCON |=  0x02;                  // T1M = 0; SCA1:0 = 10
 102   2         }
 103   1      
 104   1         TL1 = TH1;                          // init Timer1
 105   1         TR1 = 1;                            // START Timer1
 106   1         
 107   1         EIE2      = 0x40;                   // Enable UART1 interrupts
 108   1      
 109   1         SFRPAGE = UART1_PAGE;
 110   1         EIP2    |= 0x40;                     // Make UART high priority
 111   1      
 112   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 113   1      
 114   1      }
 115          
 116          void PCA_Init()
 117          {
C51 COMPILER V9.00   INIT6                                                                 11/27/2012 08:28:53 PAGE 3   

 118   1          SFRPAGE   = PCA0_PAGE;
 119   1          PCA0CN    = 0x40;
 120   1          PCA0MD    = 0x01; //         ECF=1;
 121   1          PCA0CPM0  = 0x43;
 122   1               PCA0CPH0  = 0xFF;
 123   1               PCA0CPL0  = 0xFF;
 124   1               PCA0CPM1  = 0x43;
 125   1               PCA0CPH1  = 0xFF;
 126   1               PCA0CPL1  = 0xFF;
 127   1               CF = 0;
 128   1          EIP1      |= 0x08;
 129   1      }
 130          
 131          void ADC_Init()
 132          {
 133   1         char SFRPAGE_SAVE = SFRPAGE;        // Save Current SFR page
 134   1      
 135   1         SFRPAGE = ADC0_PAGE;
 136   1      
 137   1         ADC0CN = 0x04;                      // ADC0 disabled; normal tracking
 138   1                                             // mode; ADC0 conversions are initiated
 139   1                                             // on overflow of Timer3; ADC0 data is
 140   1                                             // right-justified
 141   1      
 142   1         REF0CN = 0x07;                      // Enable temp sensor, on-chip VREF,
 143   1                                             // and VREF output buffer
 144   1      
 145   1         AMX0CF = 0x00;                      // AIN inputs are single-ended (default)
 146   1      
 147   1         AMX0SL = 0x01;                      // Select AIN0.1 pin as ADC mux input
 148   1      
 149   1         ADC0CF = (SYSCLK/SAR_CLK) << 3;     // ADC conversion clock = 2.5MHz
 150   1         ADC0CF |= 0x00;                     // PGA gain = 1 (default)
 151   1      
 152   1         EIE2 |= 0x02;                       // enable ADC interrupts
 153   1      
 154   1         SFRPAGE   = ADC0_PAGE;
 155   1         ADC0CN    = 0x84;
 156   1              
 157   1         EIP2      |= 0x02;
 158   1      
 159   1         SFRPAGE = SFRPAGE_SAVE;             // Restore SFR page
 160   1      }
 161          //------------------------------------------------------------------------------------------
 162          void Port_IO_Init(void)
 163          {
 164   1          // P0.0  -  TX0 (UART0), Open-Drain, Digital
 165   1          // P0.1  -  RX0 (UART0), Open-Drain, Digital
 166   1          // P0.2  -  SDA (SMBus), Open-Drain, Digital
 167   1          // P0.3  -  SCL (SMBus), Open-Drain, Digital
 168   1          // P0.4  -  TX1 (UART1), Open-Drain, Digital
 169   1          // P0.5  -  RX1 (UART1), Open-Drain, Digital
 170   1          // P0.6  -  CEX0 (PCA),  Push-Pull,  Digital ÿ»Ã
 171   1          // P0.7  -  CEX1 (PCA),  Push-Pull,  Digital ÿ»Ã
 172   1      
 173   1          // P1.0  -  T0 (Timer0), Push-Pull,  Digital
 174   1          // P1.1  -  wind Speed INT0 (Tmr0), Push-Pull,  Digital
 175   1          // P1.2  -  T1 (Timer1), Push-Pull,  Digital
 176   1          // P1.3  -  wind Angle INT1 (Tmr1), Push-Pull,  Digital
 177   1          // P1.4  -  T2 (Timer2), Push-Pull,  Digital
 178   1               // P2.0 À»– CLOCK
 179   1               // P2.1 À»– DATA
C51 COMPILER V9.00   INIT6                                                                 11/27/2012 08:28:53 PAGE 4   

 180   1      
 181   1          SFRPAGE   = CONFIG_PAGE;
 182   1          P0MDOUT   = 0xff; //0xf3; 
 183   1          P1MDOUT   = 0xFF;
 184   1               P2MDOUT   = 0xFF;
 185   1               P3MDOUT   = 0xFF;
 186   1          XBR0      = 0x15;
 187   1          XBR1      = 0xbe; //0x3E; //(^7 ‚˚‚Ó‰ËÏ Ì‡ sysclk Ì‡ ÌÓ„Û)
 188   1          XBR2      = 0x44; 
 189   1      }
 190           
 191          void Oscillator_Init(void)
 192          {
 193   1      //      int loop;                           
 194   1         char SFRPAGE_SAVE = SFRPAGE;        
 195   1         SFRPAGE = CONFIG_PAGE;             
 196   1      
 197   1         OSCICN = 0x83; 
 198   1      /*                           
 199   1         CLKSEL = 0x00;                      
 200   1      
 201   1         SFRPAGE = CONFIG_PAGE;
 202   1         PLL0CN  = 0x00;                   
 203   1         SFRPAGE = LEGACY_PAGE;
 204   1         FLSCL |=  0x30;
 205   1         if (SYSCLK <= 25000000) {           
 206   1         // Set FLASH read timing for <=25MHz
 207   1            FLSCL &= ~0x30;
 208   1         } else if (SYSCLK <= 50000000) {    
 209   1         // Set FLASH read timing for <=50MHz
 210   1            FLSCL &= ~0x20;
 211   1         } else if (SYSCLK <= 75000000) {    
 212   1         // Set FLASH read timing for <=75MHz
 213   1            FLSCL &= ~0x10;
 214   1         } else {                            // set FLASH read timing for <=100MHz
 215   1            FLSCL &= ~0x00;
 216   1         }
 217   1         SFRPAGE = CONFIG_PAGE;
 218   1         PLL0CN |= 0x01;                     // Enable Power to PLL
 219   1         PLL0DIV = 0x01;                     // Set Pre-divide value to N (N = 1)
 220   1              if (SYSCLK <= 25000000) { 
 221   1                               
 222   1         } else if (SYSCLK <= 50000000) {    
 223   1                      PLL0FLT = 0x21;
 224   1         } else if (SYSCLK <= 75000000) {    
 225   1                      PLL0FLT = 0x01;
 226   1         } else {                            // set FLASH read timing for <=100MHz
 227   1            PLL0FLT = 0x01;
 228   1         }
 229   1              PLL0MUL = 0x02;
 230   1         for (loop=0; loop < 256; loop++);   
 231   1         PLL0CN  |= 0x02;                    
 232   1         while(!(PLL0CN & 0x10));            
 233   1         CLKSEL  = 0x02;            
 234   1                     */
 235   1         SFRPAGE = SFRPAGE_SAVE;             
 236   1      }
 237          
 238          void Interrupts_Init(void)
 239          {
 240   1          IE        = 0xBF;
 241   1          EIE1      = 0x08;
C51 COMPILER V9.00   INIT6                                                                 11/27/2012 08:28:53 PAGE 5   

 242   1          EIE2      = 0x42; 
 243   1      }
 244          
 245          
 246          //------------------------------------------------------------------------------------------
 247          
 248          //#endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    236    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
