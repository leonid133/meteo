C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SERVO_T1
OBJECT MODULE PLACED IN servo_t1.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe servo_t1.c DB OE BR

line level    source

   1          
   2          #include "c8051f120.h"
   3          #include "init_t.h"
   4          //#include "comport.h"
   5          #include <intrins.h>
   6          #include <ctype.h>
   7          #include <stdio.h>
   8          #include <stdlib.h>
   9          #include <math.h> 
  10          //system
  11          #define SYSCLK      24883200  // (24856840L * 1 / 1) 
  12          #define FREQT0 1183 //Hz
  13          
  14          //сигнальные
  15          sbit P3_3 = P3^3;
  16          sbit LED = P1^6;
  17          sbit LED2 = P1^5;
  18          sbit BUTTON = P3^7;
  19          xdata unsigned char InitFlag;
  20          xdata unsigned int iter;
  21          
  22          //ADC
  23          sfr16 ADC0     = 0xbe;   // ADC0 data
  24          bit DavlFlag = 0;
  25          xdata long Result;                    
  26          xdata unsigned int_dec = 256;    
  27          xdata long accumulator = 0L;       
  28          
  29          //LIR
  30          sbit LIR_DATA = P2^0; //P2^2;
  31          sbit LIR_SCK = P2^1;
  32          xdata unsigned int LData, THTL_mem=0;
  33          xdata float A = 0, A_pr = 0, A_zad = 0, A_zad_pr = 0, V = 0, V_pr = 0, V_zad = 0, V_zad_pr = 0, u = 0, u_z
             -ad = 0, Accel=0, tau=0.0, K = 500.;
  34          /*
  35          typedef union INT {                   
  36             unsigned int i;
  37             unsigned char b[2];
  38          } INT;
  39          */
  40          xdata int  UgolMaxV = 4, Vmax = 200, Umax = 2;
  41          xdata float taumax = 0.000025;
  42          
  43          xdata unsigned char F;
  44          xdata unsigned int delta, LirData, LirTarget, Fdelta;
  45          //Veter
  46          bit VeterFlag = 0;
  47          sbit WSpeed = P1^1;
  48          sbit WAngle = P1^3;
  49          
  50          xdata float Vspeed=0, Angle=0;
  51          xdata unsigned long RTC, RTCV, RTCA;
  52          xdata unsigned long TV,TA;
  53          
  54          typedef union FLOAT {                   
C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 2   

  55             float f;
  56             unsigned char b[4];
  57          } FLOAT;
  58          //UART0
  59          #define NBFM            50
  60          xdata unsigned char BuferFromModem [NBFM]; 
  61          xdata unsigned char wBFM, rBFM, marBFM;
  62          xdata unsigned int u0timer;
  63          
  64          #define SIZE_BUFFER0            50
  65          xdata char BufferInModem[SIZE_BUFFER0]; 
  66          xdata int r0, rk;
  67          bit flTransmiter;       
  68          
  69          //GPS
  70          typedef union LINT {                   
  71             unsigned long i;
  72             unsigned char b[4];
  73          } LINT;
  74          #define NS      75
  75          xdata char mess [NS], r, w, mar;                
  76          bit flNewGPS;
  77          xdata unsigned int Vz, koors, flNoKoord, liTimer_tick_GPS, liTimer_tick;
  78          xdata unsigned long LatGnd=0, LonGnd=0;
  79          
  80          
  81          #define cT              0xA04B
  82          #define ctau    0X17ED
  83          
  84          //------------------------------------------------------------------------------
  85          void OutModem1(unsigned char Data, char i)
  86          {
  87   1              BufferInModem[i] = Data | 0x80;
  88   1      }
  89          
  90          //------------------------------------------------------------------------------
  91          void OutModem2(unsigned int Data, char i)
  92          {
  93   1              BufferInModem[i] = (Data & 0x007f)| 0x80;
  94   1              BufferInModem[i+1] = ((Data & 0x3f80) >> 7)| 0x80;
  95   1      }
  96          
  97          //------------------------------------------------------------------------------
  98          void OutModem4(unsigned long int Data, char i)
  99          {
 100   1              BufferInModem[i] = (Data & 0x0000007f)| 0x80;
 101   1              BufferInModem[i+1] = ((Data & 0x3f80) >> 7) | 0x80;
 102   1              BufferInModem[i+2] = ((Data & 0x1fc000) >> 14) | 0x80;
 103   1         BufferInModem[i+3] = ((Data & 0xfe00000)>> 21) | 0x80;
 104   1      }
 105          //------------------------------------------------------------------------------------
 106          void main(void)
 107          {
 108   1      //ADC
 109   1              xdata long Pressure = 0;
 110   1              xdata float PressureFl = 0.0;
 111   1      //UART
 112   1      //   xdata char RK_code[26], nByte = 0, KontrSumma = 0, PWM;
 113   1      //        unsigned int Value;
 114   1      //      INT Aint;
 115   1              FLOAT Bfloat;
 116   1              LINT tmpLong;
C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 3   

 117   1      //GPS
 118   1         bit ValidGPS, flPoint;       
 119   1              xdata unsigned char i_comma, tmpGPS[6], nLetter = 7;
 120   1              xdata unsigned long temp_koord;
 121   1              xdata unsigned int i;
 122   1      
 123   1         xdata unsigned char chtmp;
 124   1              xdata int tmp;
 125   1      
 126   1              EA = 0;
 127   1              WDTCN     = 0xDE;       //выкл собаки
 128   1         WDTCN     = 0xAD;
 129   1              EA= 1;   
 130   1              
 131   1              LED=0;
 132   1      
 133   1              Port_IO_Init();
 134   1              Oscillator_Init();   
 135   1              Interrupts_Init(); 
 136   1              Timer_Init();
 137   1              UART0_Init();
 138   1      //   UART1_Init();
 139   1      //      PCA_Init();
 140   1      //  ADC_Init();
 141   1      
 142   1      //      LirTarget = 0x03ff;
 143   1      //      Fdelta = 0;
 144   1              flNewGPS = 0;
 145   1              u0timer=0;
 146   1      
 147   1              while(1)
 148   1              {
 149   2      //ADC
 150   2      /*              EIP2 |= 0x02;
 151   2                      if(DavlFlag==1)
 152   2                      {
 153   2                              EA = 0; 
 154   2                              Pressure =  Result * 2430 / 4095;
 155   2                              EA = 1; 
 156   2                              DavlFlag = 0;
 157   2                              PressureFl = PressureFl + (Pressure - PressureFl)*0.5;
 158   2                      }
 159   2      
 160   2      //Veter
 161   2                      if(VeterFlag==1)
 162   2                      {
 163   2                              Vspeed = (float)FREQT0/((float)TV*0.75);        //???
 164   2                              Angle = 360. - (360.*(float)TV/(float)TA);
 165   2                              VeterFlag = 0;
 166   2                      }
 167   2      
 168   2                      //GPS---------------------------------------------------------------------------
 169   2                      if(flNewGPS == 1)       
 170   2                      {
 171   2                              flNewGPS = 0;
 172   2                              if (r < w+mar*NS) 
 173   2                              {
 174   2                                      if(mess[r] == '$')
 175   2                                      {
 176   2                      nLetter = 0;
 177   2                                      }
 178   2                      else if ((nLetter == 0) && (mess[r] == 'G'))
C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 4   

 179   2                      nLetter++;
 180   2                      else if ((nLetter == 1) && (mess[r] == 'P'))
 181   2                      nLetter++;
 182   2                      else if ((nLetter == 2) && (mess[r] == 'R'))
 183   2                      nLetter++;
 184   2                       else if ((nLetter == 3) && (mess[r] == 'M'))
 185   2                       nLetter++;
 186   2                 else if ((nLetter == 4) && (mess[r] == 'C'))
 187   2                      {
 188   2                      nLetter++;
 189   2                                              i_comma = 0;
 190   2                                              ValidGPS = 0;
 191   2                 } 
 192   2                              else if(mess[r] == ',')
 193   2                                      {
 194   2                                              i_comma++;
 195   2                                              i = 0;
 196   2                                              flPoint = 0;
 197   2                                      }
 198   2                              else if(i_comma == 2)
 199   2                                      {
 200   2                                              if(mess[r] == 'A') 
 201   2                                                      ValidGPS = 1;
 202   2                                              else
 203   2                                              {
 204   2                                                      ValidGPS = 0;
 205   2              //                                      flNoKoord = 1;
 206   2              //                                      liTimer_tick_GPS = liTimer_tick;
 207   2                                              }
 208   2                                      }
 209   2                      else if (ValidGPS)
 210   2                                      {
 211   2                                              if (i_comma == 3)                                       //Latitude
 212   2                                              {
 213   2                                                      if(mess[r] == '.')
 214   2                                                      {
 215   2                                                              flPoint = 1;
 216   2                                                              i = 0;
 217   2                                                      }
 218   2                                                      else if (flPoint == 0)                                          //celaya chast
 219   2                                                      {
 220   2                                                              tmpGPS[i++] = mess[r];
 221   2                                                              if(i == 2)
 222   2                                                              {
 223   2                                              tmpGPS[i] = 0;
 224   2                                                                      temp_koord = atoi(tmpGPS);
 225   2                                              temp_koord = 60UL*10000*temp_koord;
 226   2                                                              }       
 227   2                                                              else if(i == 4)
 228   2                                                              {
 229   2                                                                      tmpGPS[0] = tmpGPS[1] = '0';
 230   2                                              tmpGPS[i] = 0;
 231   2                                              temp_koord = temp_koord+10000UL*atoi(tmpGPS);
 232   2                                                              }       
 233   2                                                      }
 234   2                                                      else                                                                                            //drobnaya chast
 235   2                                                      {
 236   2                                                              tmpGPS[i++] = mess[r];
 237   2                                      tmpGPS[i] = 0;
 238   2                                                      }
 239   2                                              }
 240   2                                              else if (i_comma == 4)
C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 5   

 241   2                                              {
 242   2                                      temp_koord = temp_koord+atoi(tmpGPS);
 243   2      //-----------
 244   2      //lLatGnd = 55UL*60*10000+50UL*10000+8680;
 245   2      //--------
 246   2                                                      if (mess[r] == 'S')                                             //znak Latitude
 247   2                                                              LatGnd = 54000000UL-temp_koord;         //90UL*60*10000-koord;
 248   2                                                      else              
 249   2                                                              LatGnd = 54000000UL+temp_koord;         //90UL*60*10000+koord;
 250   2                                              }
 251   2                                              else if (i_comma == 5)                          //Longitude
 252   2                                              {
 253   2                                                      if(mess[r] == '.')
 254   2                                                      {
 255   2                                                              flPoint = 1;
 256   2                                                              i = 0;
 257   2                                                      }
 258   2                                                      else if (flPoint == 0)                                          //celaya chast
 259   2                                                      {
 260   2                                                              tmpGPS[i++] = mess[r];
 261   2                                                              if(i == 3)
 262   2                                                              {
 263   2                                              tmpGPS[i] = 0;
 264   2                                              temp_koord = atoi(tmpGPS);
 265   2                                              temp_koord = 60UL*10000*temp_koord;
 266   2                                                              }       
 267   2                                                              else if(i == 5)
 268   2                                                              {
 269   2                                                                      tmpGPS[0] = tmpGPS[1] = tmpGPS[2] = '0';
 270   2                                              tmpGPS[i] = 0;
 271   2                                              temp_koord = temp_koord+10000UL*atoi(tmpGPS);
 272   2                                                              }       
 273   2                                                      }
 274   2                                                      else                                                                                            //drobnaya chast
 275   2                                                      {
 276   2                                                              tmpGPS[i++] = mess[r];
 277   2                                      tmpGPS[i] = 0;
 278   2                                                      }
 279   2                                              }
 280   2                                              else if (i_comma == 6)
 281   2                                              {
 282   2                                      temp_koord = temp_koord+atoi(tmpGPS);
 283   2      //----------------
 284   2      //lLonGnd = 49UL*60*10000+6UL*10000+3760;
 285   2      //----------------
 286   2                                                      if (mess[r] == 'W')                                             //znak Longitude
 287   2                                                              LonGnd = 108000000UL-temp_koord;                //180UL*60*10000-koord;
 288   2                                                      else       
 289   2                                                              LonGnd = temp_koord+108000000UL;                //180UL*60*10000;
 290   2                                              }
 291   2                                              else if (i_comma == 7)                                                  //skorost v uzlah
 292   2                                              {
 293   2                                                      if(mess[r] == '.')
 294   2                                                      {
 295   2                                                              flPoint = 1;
 296   2                                      Vz = 1.852*atoi(tmpGPS)/3.6;            //preobrazovat iz uzlov v m/s
 297   2      //---------
 298   2      //Vz = 20;
 299   2      //-----------
 300   2                                                      }
 301   2                                                      else if(flPoint == 0)
 302   2                                                      {
C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 6   

 303   2                                                              tmpGPS[i++] = mess[r];
 304   2                                      tmpGPS[i] = 0;
 305   2                                                      }
 306   2                      }
 307   2                                              else if (i_comma == 8)                                                  //kurs v gradusah
 308   2                                              {
 309   2                                                      if(mess[r] == '.')
 310   2                                                      {
 311   2                                                              flPoint = 1;
 312   2                                      koors = atoi(tmpGPS);
 313   2                              if (koors < 0)
 314   2                              koors = 360+koors;
 315   2                                                              flNoKoord = 0;
 316   2                                                              flNewGPS = 1;
 317   2                                                              liTimer_tick_GPS = liTimer_tick;        
 318   2              //                          OutModem20();
 319   2      //-----------                                              
 320   2      //koors = 30;
 321   2      //-----------
 322   2                                                      }
 323   2                                                      else if(flPoint == 0)
 324   2                                                      {
 325   2                                                              tmpGPS[i++] = mess[r];
 326   2                                      tmpGPS[i] = 0;
 327   2                                                      }
 328   2                          }
 329   2                                      }
 330   2                                      r++;
 331   2                              if(r >= NS)
 332   2                                      {
 333   2                              r = 0;
 334   2                                              mar = 0;        
 335   2                                      }      
 336   2                              }
 337   2                      }
 338   2      */
 339   2                      //---------------------------------------------------------------------
 340   2      //                              if(flTransmiter == 0) 
 341   2      //if(u0timer > (3*FREQT0))
 342   2                      if((flTransmiter == 0) && (u0timer > FREQT0*0.3))
 343   2                      {
 344   3                              u0timer = 0;
 345   3                              if(wBFM > 4)
 346   3                              {
 347   4                              
 348   4                                      chtmp = 0;
 349   4                                      for (i = 0; i < 5; i++ )
 350   4                                      chtmp = chtmp ^ BuferFromModem[i];
 351   4                                      chtmp = chtmp | 0x80;
 352   4                                      if(chtmp == BuferFromModem[5] && BuferFromModem[0] == (46 | 0x40))
 353   4                                      {
 354   5                                              tmp = BuferFromModem[1]&~0x80;
 355   5                              tmp |= ((int)(BuferFromModem[2]&~0x80)<<7);
 356   5                                              if(tmp<=360 && tmp>=0)
 357   5                                              {
 358   6                                                      A_zad = tmp;
 359   6                                                      tmp = BuferFromModem[3]&~0x80;
 360   6                                                      tmp |= ((int)(BuferFromModem[4]&~0x80)<<7);
 361   6                                                      K = tmp;
 362   6                                              }
 363   5                                      }
 364   4                                      wBFM = 0;
C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 7   

 365   4                              }
 366   3      
 367   3                              BufferInModem[0] = 0x40 | 40;                   
 368   3                              OutModem4(LatGnd, 1);
 369   3                              OutModem4(LonGnd, 5);
 370   3                              OutModem2((int)Angle, 9);
 371   3                              OutModem2((int)Vspeed, 11);
 372   3                              OutModem2((int)PressureFl, 13);
 373   3                      BufferInModem[15] = 0;
 374   3                              for (i = 0; i < 15; i++ )
 375   3                              BufferInModem[15] = BufferInModem[15] ^ BufferInModem[i];
 376   3                              BufferInModem[15] = 0x80 |      BufferInModem[15];
 377   3      
 378   3                              BufferInModem[16] = 0x40|41;
 379   3                              OutModem2((int)A, 17);
 380   3                      BufferInModem[19] = BufferInModem[16] ^ BufferInModem[17] ^ BufferInModem[18] | 0x80;
 381   3                              r0 = 0;
 382   3                              rk = 20;
 383   3                              //dopolnitelnye dannye
 384   3                              tmp = (int)(Accel);
 385   3                              OutModem2(tmp, 20);
 386   3                              rk+=2;
 387   3                              //A_zad, V, V_zad
 388   3                              tmp = (int)(A_zad*10.);
 389   3                              OutModem2(tmp, 22);
 390   3                              tmp = (int)(V*10.);
 391   3                              OutModem2(tmp, 24);
 392   3                              tmp = (int)(V_zad*10.);
 393   3                              OutModem2(tmp, 26);
 394   3                              rk+=6;
 395   3                              //      
 396   3                              flTransmiter = 1;
 397   3                              
 398   3                              SFRPAGE = 0x00;
 399   3                              TI0 = 1;
 400   3                      }
 401   2              }
 402   1      }
*** WARNING C280 IN LINE 115 OF SERVO_T1.C: 'Bfloat': unreferenced local variable
*** WARNING C280 IN LINE 116 OF SERVO_T1.C: 'tmpLong': unreferenced local variable
*** WARNING C280 IN LINE 118 OF SERVO_T1.C: 'ValidGPS': unreferenced local variable
*** WARNING C280 IN LINE 118 OF SERVO_T1.C: 'flPoint': unreferenced local variable
*** WARNING C280 IN LINE 119 OF SERVO_T1.C: 'i_comma': unreferenced local variable
*** WARNING C280 IN LINE 119 OF SERVO_T1.C: 'tmpGPS': unreferenced local variable
*** WARNING C280 IN LINE 120 OF SERVO_T1.C: 'temp_koord': unreferenced local variable
 403          //------------------------------------------------------------------------------------
 404          void INT0 (void) interrupt 0 //skorost vetra
 405          {
 406   1              EX0 =   0;
 407   1              VeterFlag = 1;
 408   1              TV = RTC - RTCV;
 409   1              RTCV = RTC;
 410   1              return;
 411   1      }
 412          
 413          //------------------------------------------------------------------------------------
 414          void TIMER_ISR0 (void) interrupt 1
 415          {
 416   1              xdata float tmp;
 417   1              static xdata  unsigned int shim;
 418   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 419   1              static xdata char flShim = 0;
C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 8   

 420   1              SFRPAGE = TIMER01_PAGE;
 421   1              RTC++;
 422   1              u0timer++;
 423   1      
 424   1      /*      
 425   1              if(WSpeed != 0)
 426   1                      EX0 = 1;
 427   1      
 428   1              if(WAngle != 0)
 429   1                      EX1 = 1;
 430   1      */
 431   1      if(flShim == 0)
 432   1      {       
 433   2                      flShim = 1;
 434   2      
 435   2                      LData = 0;
 436   2                      EA = 0; //опрос ЛИР
 437   2              
 438   2                      LIR_SCK = 1;    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 439   2                      LIR_SCK = 0;    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 440   2                              
 441   2                      LIR_SCK = 1;                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 442   2                      LIR_SCK = 0;                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++; 
 443   2                      LData = LData | LIR_DATA;       
 444   2      
 445   2                      LIR_SCK = 1;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 446   2                      LIR_SCK = 0;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 447   2                      LData = (LData << 1) | LIR_DATA;        
 448   2              
 449   2                      LIR_SCK = 1;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 450   2                      LIR_SCK = 0;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 451   2                      LData = (LData << 1) | LIR_DATA;        
 452   2      
 453   2                      LIR_SCK = 1;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 454   2                      LIR_SCK = 0;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 455   2                      LData = (LData << 1) | LIR_DATA;        
 456   2              
 457   2                      LIR_SCK = 1;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 458   2                      LIR_SCK = 0;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 459   2                      LData = (LData << 1) | LIR_DATA;        
 460   2      
 461   2                      LIR_SCK = 1;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 462   2                      LIR_SCK = 0;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 463   2                      LData = (LData << 1) | LIR_DATA;        
 464   2      
 465   2                      LIR_SCK = 1;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 466   2                      LIR_SCK = 0;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 467   2                      LData = (LData << 1) | LIR_DATA;        
 468   2      
 469   2                      LIR_SCK = 1;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 470   2                      LIR_SCK = 0;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 471   2                      LData = (LData << 1) | LIR_DATA;        
 472   2      
 473   2                      LIR_SCK = 1;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 474   2                      LIR_SCK = 0;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 475   2                      LData = (LData << 1) | LIR_DATA;        
 476   2      
 477   2                      LIR_SCK = 1;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 478   2                      LIR_SCK = 0;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 479   2                      LData = (LData << 1) | LIR_DATA;        
 480   2      
 481   2                      LIR_SCK = 1;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 9   

 482   2                      LIR_SCK = 0;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 483   2                      LData = (LData << 1) | LIR_DATA;        
 484   2      
 485   2                      LIR_SCK = 1;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 486   2                      LIR_SCK = 0;                                                    shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;shim++;
 487   2                      LData = (LData << 1) | LIR_DATA;
 488   2      
 489   2                      LIR_SCK = 1; 
 490   2                      EA = 1;
 491   2              
 492   2                      //управление антеной------------------------------------------------------------------------
 493   2                      tmp = 360.0/4095.0*LData;
 494   2                      if ((A > 270) && (tmp < 90))
 495   2                      {
 496   3                              A = A+(tmp+360-A)/FREQT0*K;
 497   3                              if (A > 360)
 498   3                                      A = A-360;
 499   3                      }
 500   2                      else if ((tmp > 270) && (A < 90))
 501   2                      {
 502   3                              A = A+(tmp-A-360)/FREQT0*K;
 503   3                              if (A < 0)
 504   3                                      A = A+360;
 505   3                      }
 506   2                      else
 507   2                              A = A+(tmp-A)/FREQT0*K;
 508   2      
 509   2                      if ((A_pr > 270) && (A < 90))
 510   2                              V = V+((A+360-A_pr)*FREQT0-V)/FREQT0*K; 
 511   2                      else if ((A > 270) && (A_pr < 90))
 512   2                              V = V+((A-A_pr-360)*FREQT0-V)/FREQT0*K; 
 513   2                      else
 514   2                              V = V+((A-A_pr)*FREQT0-V)/FREQT0*K; 
 515   2                      A_pr = A;
 516   2      
 517   2      /*              if (V > Vmax) 
 518   2                              V = Vmax;
 519   2                      else if (V < -Vmax) 
 520   2                              V = -Vmax;
 521   2      */
 522   2      /*              u = u+((V-V_pr)*FREQT0-u)*.5;//u = u+((V-V_pr)*FREQT0-u)/FREQT0*K;
 523   2                      V_pr = V;
 524   2      */      
 525   2                      V_zad = A_zad-A;
 526   2                      while (V_zad > 180)
 527   2                      V_zad -= 360;
 528   2                      while (V_zad < -180)
 529   2                      V_zad += 360;
 530   2                      
 531   2                      tmp = (10.0*V_zad-V)/Vmax*ctau;
 532   2                      if (tmp > (ctau)) tmp = ctau;
 533   2                      if (tmp < -(ctau)) tmp = -(ctau);
 534   2      
 535   2                      if (tmp > 512)
 536   2                      {
 537   3                              shim = 0xffff-tmp;
 538   3                      LED2 = 0;
 539   3                              LED = 1;
 540   3                              TH0 = (shim & 0xff00) >> 8;
 541   3                         TL0 = shim & 0x00ff;
 542   3                      }
 543   2                      else if(tmp < -512)
C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 10  

 544   2                      {
 545   3                              shim = 0xffff+tmp;
 546   3                         LED = 0;
 547   3                              LED2 = 1;
 548   3                              TH0 = (shim & 0xff00) >> 8;
 549   3                         TL0 = shim & 0x00ff;
 550   3                      }
 551   2                      else
 552   2                      {
 553   3                      LED = 0;
 554   3                              LED2 = 0;
 555   3                              flShim = 0;
 556   3                      }
 557   2              }
 558   1              else
 559   1              {
 560   2                      flShim = 0;
 561   2                      LED = 0;
 562   2                      LED2 = 0;
 563   2                      
 564   2                      shim = cT + 4*ctau;
 565   2                      TH0 = (shim & 0xff00) >> 8;
 566   2                      TL0 = shim & 0x00ff;
 567   2              }
 568   1              SFRPAGE = SFRPAGE_SAVE;
 569   1              return;
 570   1      }
 571          
 572          //------------------------------------------------------------------------------------
 573          void INT1 (void) interrupt 2 //napravl vetra
 574          {
 575   1              EX1=0;
 576   1              TA = RTC - RTCA;
 577   1              RTCA = RTC;
 578   1              return;
 579   1      }
 580          
 581          //------------------------------------------------------------------------------------
 582          void COM_UART0_isr(void) interrupt 4
 583          {
 584   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 585   1              SFRPAGE = UART0_PAGE;
 586   1              
 587   1              if (RI0)
 588   1              {
 589   2                      BuferFromModem [wBFM++] = SBUF0;  // read character
 590   2                      if(wBFM >= NBFM)
 591   2                      {
 592   3                      wBFM = 0;
 593   3                              marBFM = 1;
 594   3                      }
 595   2                      RI0 = 0;
 596   2              }
 597   1              if (TI0)
 598   1              {
 599   2                      if(r0 < rk)
 600   2                      {
 601   3                              SBUF0 = BufferInModem[r0++];
 602   3                      }
 603   2                      else
 604   2                      {
 605   3                              flTransmiter = 0;
C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 11  

 606   3                      }
 607   2                      TI0 = 0;
 608   2              }
 609   1              
 610   1              SFRPAGE = SFRPAGE_SAVE;
 611   1              return;
 612   1      }
 613          
 614          //-------------------------------------------------------------------
 615          
 616          void PCA_isr (void)interrupt 9 
 617          {
 618   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 619   1              SFRPAGE = PCA0_PAGE;
 620   1              CF = 0;                                                                                 //Сброс флага прерывания шимогенератора
 621   1              SFRPAGE = SFRPAGE_SAVE;
 622   1              return;
 623   1      }
 624          //-------------------------------------------------------------------
 625          
 626          void ADC0_ISR (void) interrupt 15
 627          {
 628   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 629   1              SFRPAGE = ADC0_PAGE;
 630   1              AD0INT = 0;                         // Clear ADC conversion complete
 631   1                                             // indicator
 632   1         accumulator += ADC0;                // Read ADC value and add to running
 633   1                                             // total
 634   1         int_dec--;                          // Update decimation counter
 635   1      
 636   1         if (int_dec == 0)                   // If zero, then post result
 637   1         {
 638   2                      int_dec = 256;                          // Reset counter
 639   2            Result = accumulator >> 8;
 640   2            accumulator = 0L;                // Reset accumulator
 641   2                      DavlFlag = 1;
 642   2                      EIP2  &= ~0x02;
 643   2         }
 644   1              SFRPAGE = SFRPAGE_SAVE;
 645   1              return;
 646   1      }
 647          //-------------------------------------------------------------------
 648          void GPS_UART1_isr(void) interrupt 20
 649          {
 650   1              xdata char SFRPAGE_SAVE = SFRPAGE;
 651   1              SFRPAGE = UART1_PAGE;
 652   1              if (RI1)
 653   1              {
 654   2                      flNewGPS = 1;
 655   2                      mess [w++] = SBUF1;  // read character
 656   2                      if(w >= NS)
 657   2                      {
 658   3                      w = 0;
 659   3                              mar = 1;
 660   3                      }
 661   2                      RI1 = 0;
 662   2              }
 663   1              if (TI1)
 664   1              {
 665   2                              
 666   2              }
 667   1              SFRPAGE = SFRPAGE_SAVE;
C51 COMPILER V9.00   SERVO_T1                                                              11/22/2012 17:01:24 PAGE 12  

 668   1              return;
 669   1      }
 670          
 671          
 672          //#endif
 673          
 674          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   6920    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    324      34
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  7 WARNING(S),  0 ERROR(S)
